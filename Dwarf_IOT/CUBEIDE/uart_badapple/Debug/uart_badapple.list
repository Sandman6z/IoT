
uart_badapple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800326c  0800326c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800326c  0800326c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800326c  0800326c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  08003280  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003280  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae04  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b6b  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a15  00000000  00000000  0002db10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006df8  00000000  00000000  00030525  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005850a  00000000  00000000  0003731d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008f827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f4c  00000000  00000000  0008f8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800319c 	.word	0x0800319c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800319c 	.word	0x0800319c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <LL_RCC_HSI_Enable+0x18>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <LL_RCC_HSI_Enable+0x18>)
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	0049      	lsls	r1, r1, #1
 8000226:	430a      	orrs	r2, r1
 8000228:	601a      	str	r2, [r3, #0]
}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000

08000234 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <LL_RCC_HSI_IsReady+0x24>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	401a      	ands	r2, r3
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	00db      	lsls	r3, r3, #3
 8000246:	429a      	cmp	r2, r3
 8000248:	d101      	bne.n	800024e <LL_RCC_HSI_IsReady+0x1a>
 800024a:	2301      	movs	r3, #1
 800024c:	e000      	b.n	8000250 <LL_RCC_HSI_IsReady+0x1c>
 800024e:	2300      	movs	r3, #0
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <LL_RCC_SetSysClkSource+0x24>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	2207      	movs	r2, #7
 800026a:	4393      	bics	r3, r2
 800026c:	0019      	movs	r1, r3
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <LL_RCC_SetSysClkSource+0x24>)
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	430a      	orrs	r2, r1
 8000274:	609a      	str	r2, [r3, #8]
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b002      	add	sp, #8
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	40021000 	.word	0x40021000

08000284 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <LL_RCC_GetSysClkSource+0x14>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	2238      	movs	r2, #56	; 0x38
 800028e:	4013      	ands	r3, r2
}
 8000290:	0018      	movs	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	40021000 	.word	0x40021000

0800029c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <LL_RCC_SetAHBPrescaler+0x28>)
 80002aa:	4013      	ands	r3, r2
 80002ac:	0019      	movs	r1, r3
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	609a      	str	r2, [r3, #8]
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b002      	add	sp, #8
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40021000 	.word	0x40021000
 80002c4:	fffff0ff 	.word	0xfffff0ff

080002c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80002d6:	4013      	ands	r3, r2
 80002d8:	0019      	movs	r1, r3
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	430a      	orrs	r2, r1
 80002e0:	609a      	str	r2, [r3, #8]
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000
 80002f0:	ffff8fff 	.word	0xffff8fff

080002f4 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <LL_RCC_SetUSARTClockSource+0x2c>)
 80002fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	0c12      	lsrs	r2, r2, #16
 8000304:	43d2      	mvns	r2, r2
 8000306:	401a      	ands	r2, r3
 8000308:	0011      	movs	r1, r2
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	041b      	lsls	r3, r3, #16
 800030e:	0c1a      	lsrs	r2, r3, #16
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000312:	430a      	orrs	r2, r1
 8000314:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	40021000 	.word	0x40021000

08000324 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <LL_RCC_PLL_Enable+0x18>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <LL_RCC_PLL_Enable+0x18>)
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	0449      	lsls	r1, r1, #17
 8000332:	430a      	orrs	r2, r1
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40021000 	.word	0x40021000

08000340 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <LL_RCC_PLL_IsReady+0x24>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	049b      	lsls	r3, r3, #18
 800034c:	401a      	ands	r2, r3
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	049b      	lsls	r3, r3, #18
 8000352:	429a      	cmp	r2, r3
 8000354:	d101      	bne.n	800035a <LL_RCC_PLL_IsReady+0x1a>
 8000356:	2301      	movs	r3, #1
 8000358:	e000      	b.n	800035c <LL_RCC_PLL_IsReady+0x1c>
 800035a:	2300      	movs	r3, #0
}
 800035c:	0018      	movs	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	40021000 	.word	0x40021000

08000368 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800037c:	4013      	ands	r3, r2
 800037e:	0019      	movs	r1, r3
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	431a      	orrs	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	021b      	lsls	r3, r3, #8
 800038a:	431a      	orrs	r2, r3
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	431a      	orrs	r2, r3
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000392:	430a      	orrs	r2, r1
 8000394:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b004      	add	sp, #16
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	40021000 	.word	0x40021000
 80003a4:	1fff808c 	.word	0x1fff808c

080003a8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80003b2:	2180      	movs	r1, #128	; 0x80
 80003b4:	0549      	lsls	r1, r1, #21
 80003b6:	430a      	orrs	r2, r1
 80003b8:	60da      	str	r2, [r3, #12]
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <LL_APB1_GRP1_EnableClock+0x28>)
 80003ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <LL_APB1_GRP1_EnableClock+0x28>)
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	430a      	orrs	r2, r1
 80003d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <LL_APB1_GRP1_EnableClock+0x28>)
 80003da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	4013      	ands	r3, r2
 80003e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003e2:	68fb      	ldr	r3, [r7, #12]
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b004      	add	sp, #16
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000

080003f0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <LL_APB2_GRP1_EnableClock+0x28>)
 80003fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <LL_APB2_GRP1_EnableClock+0x28>)
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	430a      	orrs	r2, r1
 8000402:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <LL_APB2_GRP1_EnableClock+0x28>)
 8000406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4013      	ands	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800040e:	68fb      	ldr	r3, [r7, #12]
}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b004      	add	sp, #16
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000

0800041c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <LL_FLASH_SetLatency+0x24>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2207      	movs	r2, #7
 800042a:	4393      	bics	r3, r2
 800042c:	0019      	movs	r1, r3
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <LL_FLASH_SetLatency+0x24>)
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	430a      	orrs	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	40022000 	.word	0x40022000

08000444 <main>:
#include "main.h"

int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	//系统上电初始化：
	System_Init();
 8000448:	f000 f802 	bl	8000450 <System_Init>
	//进入正常运行循环：
	while(1)
 800044c:	e7fe      	b.n	800044c <main+0x8>
	...

08000450 <System_Init>:

	}
}

void System_Init()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);//打开系统控制器时钟
 8000454:	2001      	movs	r0, #1
 8000456:	f7ff ffcb 	bl	80003f0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);//打开电源管理器时钟
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	055b      	lsls	r3, r3, #21
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ffb0 	bl	80003c4 <LL_APB1_GRP1_EnableClock>
	SystemClock_Config();//初始化系统时钟树
 8000464:	f000 f81c 	bl	80004a0 <SystemClock_Config>
	UART1_Init();//初始化串口
 8000468:	f001 fca0 	bl	8001dac <UART1_Init>
	SPI2_Init();//初始化SPI2
 800046c:	f000 fe1c 	bl	80010a8 <SPI2_Init>
	OLED_Init();//初始化屏幕
 8000470:	f000 fb62 	bl	8000b38 <OLED_Init>
	OLED_DMA_Init();//初始化OLED DMA传输
 8000474:	f000 fc56 	bl	8000d24 <OLED_DMA_Init>
	OLED_Clean();//清空屏幕缓存
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	009a      	lsls	r2, r3, #2
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <System_Init+0x4c>)
 800047e:	2100      	movs	r1, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f002 fe83 	bl	800318c <memset>
	OLED_SCANALL();//将空白数据写入屏幕清屏
 8000486:	f000 fc11 	bl	8000cac <OLED_SCANALL>
	UART1_DMA_TXRX_Init();//串口接收DMA初始化
 800048a:	f001 fd0f 	bl	8001eac <UART1_DMA_TXRX_Init>
	UART1_DMA_ReadStart();//DMA开始自动搬运串口数据
 800048e:	f001 fd6b 	bl	8001f68 <UART1_DMA_ReadStart>
	TIM3_Init();//RGB定时器3
 8000492:	f001 f891 	bl	80015b8 <TIM3_Init>
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000002c 	.word	0x2000002c

080004a0 <SystemClock_Config>:

void SystemClock_Config()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80004a4:	2002      	movs	r0, #2
 80004a6:	f7ff ffb9 	bl	800041c <LL_FLASH_SetLatency>
	LL_RCC_HSI_Enable();
 80004aa:	f7ff feb5 	bl	8000218 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1);
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	f7ff fec0 	bl	8000234 <LL_RCC_HSI_IsReady>
 80004b4:	0003      	movs	r3, r0
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d1fa      	bne.n	80004b0 <SystemClock_Config+0x10>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_4);
 80004ba:	23c0      	movs	r3, #192	; 0xc0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2208      	movs	r2, #8
 80004c0:	2100      	movs	r1, #0
 80004c2:	2002      	movs	r0, #2
 80004c4:	f7ff ff50 	bl	8000368 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 80004c8:	f7ff ff2c 	bl	8000324 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 80004cc:	f7ff ff6c 	bl	80003a8 <LL_RCC_PLL_EnableDomain_SYS>
	while(LL_RCC_PLL_IsReady() != 1);
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	f7ff ff35 	bl	8000340 <LL_RCC_PLL_IsReady>
 80004d6:	0003      	movs	r3, r0
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d1fa      	bne.n	80004d2 <SystemClock_Config+0x32>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff fedd 	bl	800029c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f7ff feba 	bl	800025c <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	f7ff fecb 	bl	8000284 <LL_RCC_GetSysClkSource>
 80004ee:	0003      	movs	r3, r0
 80004f0:	2b10      	cmp	r3, #16
 80004f2:	d1fa      	bne.n	80004ea <SystemClock_Config+0x4a>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fee7 	bl	80002c8 <LL_RCC_SetAPB1Prescaler>
	LL_Init1msTick(64000000);
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <SystemClock_Config+0x7c>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fddf 	bl	80030c0 <LL_Init1msTick>
	LL_SetSystemCoreClock(64000000);
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <SystemClock_Config+0x7c>)
 8000504:	0018      	movs	r0, r3
 8000506:	f002 fe0f 	bl	8003128 <LL_SetSystemCoreClock>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 800050a:	23c0      	movs	r3, #192	; 0xc0
 800050c:	029b      	lsls	r3, r3, #10
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff fef0 	bl	80002f4 <LL_RCC_SetUSARTClockSource>
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	03d09000 	.word	0x03d09000

08000520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b7f      	cmp	r3, #127	; 0x7f
 8000532:	d809      	bhi.n	8000548 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	001a      	movs	r2, r3
 800053a:	231f      	movs	r3, #31
 800053c:	401a      	ands	r2, r3
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <__NVIC_EnableIRQ+0x30>)
 8000540:	2101      	movs	r1, #1
 8000542:	4091      	lsls	r1, r2
 8000544:	000a      	movs	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
  }
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	0002      	movs	r2, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b7f      	cmp	r3, #127	; 0x7f
 8000568:	d828      	bhi.n	80005bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056a:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <__NVIC_SetPriority+0xd4>)
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	33c0      	adds	r3, #192	; 0xc0
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	589b      	ldr	r3, [r3, r2]
 800057a:	1dfa      	adds	r2, r7, #7
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	0011      	movs	r1, r2
 8000580:	2203      	movs	r2, #3
 8000582:	400a      	ands	r2, r1
 8000584:	00d2      	lsls	r2, r2, #3
 8000586:	21ff      	movs	r1, #255	; 0xff
 8000588:	4091      	lsls	r1, r2
 800058a:	000a      	movs	r2, r1
 800058c:	43d2      	mvns	r2, r2
 800058e:	401a      	ands	r2, r3
 8000590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	019b      	lsls	r3, r3, #6
 8000596:	22ff      	movs	r2, #255	; 0xff
 8000598:	401a      	ands	r2, r3
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	0018      	movs	r0, r3
 80005a0:	2303      	movs	r3, #3
 80005a2:	4003      	ands	r3, r0
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a8:	481f      	ldr	r0, [pc, #124]	; (8000628 <__NVIC_SetPriority+0xd4>)
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	430a      	orrs	r2, r1
 80005b4:	33c0      	adds	r3, #192	; 0xc0
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005ba:	e031      	b.n	8000620 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <__NVIC_SetPriority+0xd8>)
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	0019      	movs	r1, r3
 80005c4:	230f      	movs	r3, #15
 80005c6:	400b      	ands	r3, r1
 80005c8:	3b08      	subs	r3, #8
 80005ca:	089b      	lsrs	r3, r3, #2
 80005cc:	3306      	adds	r3, #6
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	3304      	adds	r3, #4
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1dfa      	adds	r2, r7, #7
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	0011      	movs	r1, r2
 80005dc:	2203      	movs	r2, #3
 80005de:	400a      	ands	r2, r1
 80005e0:	00d2      	lsls	r2, r2, #3
 80005e2:	21ff      	movs	r1, #255	; 0xff
 80005e4:	4091      	lsls	r1, r2
 80005e6:	000a      	movs	r2, r1
 80005e8:	43d2      	mvns	r2, r2
 80005ea:	401a      	ands	r2, r3
 80005ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	019b      	lsls	r3, r3, #6
 80005f2:	22ff      	movs	r2, #255	; 0xff
 80005f4:	401a      	ands	r2, r3
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	0018      	movs	r0, r3
 80005fc:	2303      	movs	r3, #3
 80005fe:	4003      	ands	r3, r0
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <__NVIC_SetPriority+0xd8>)
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	001c      	movs	r4, r3
 800060c:	230f      	movs	r3, #15
 800060e:	4023      	ands	r3, r4
 8000610:	3b08      	subs	r3, #8
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	3306      	adds	r3, #6
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	18c3      	adds	r3, r0, r3
 800061c:	3304      	adds	r3, #4
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b003      	add	sp, #12
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <LL_AHB1_GRP1_EnableClock>:
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <LL_AHB1_GRP1_EnableClock+0x28>)
 800063a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <LL_AHB1_GRP1_EnableClock+0x28>)
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	430a      	orrs	r2, r1
 8000642:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <LL_IOP_GRP1_EnableClock+0x28>)
 8000666:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LL_IOP_GRP1_EnableClock+0x28>)
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	430a      	orrs	r2, r1
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <LL_IOP_GRP1_EnableClock+0x28>)
 8000672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel-1U]))->CCR, DMA_CCR_EN);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	3b01      	subs	r3, #1
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LL_DMA_EnableChannel+0x3c>)
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	001a      	movs	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	18d3      	adds	r3, r2, r3
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	4906      	ldr	r1, [pc, #24]	; (80006c4 <LL_DMA_EnableChannel+0x3c>)
 80006ac:	5ccb      	ldrb	r3, [r1, r3]
 80006ae:	0019      	movs	r1, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	18cb      	adds	r3, r1, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	080031b4 	.word	0x080031b4

080006c8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel-1U]))->CCR, DMA_CCR_EN);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LL_DMA_DisableChannel+0x3c>)
 80006dc:	5cd3      	ldrb	r3, [r2, r3]
 80006de:	001a      	movs	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	18d3      	adds	r3, r2, r3
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	4906      	ldr	r1, [pc, #24]	; (8000704 <LL_DMA_DisableChannel+0x3c>)
 80006ec:	5ccb      	ldrb	r3, [r1, r3]
 80006ee:	0019      	movs	r1, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	18cb      	adds	r3, r1, r3
 80006f4:	2101      	movs	r1, #1
 80006f6:	438a      	bics	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	080031b4 	.word	0x080031b4

08000708 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LL_DMA_SetDataTransferDirection+0x44>)
 800071e:	5cd3      	ldrb	r3, [r2, r3]
 8000720:	001a      	movs	r2, r3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <LL_DMA_SetDataTransferDirection+0x48>)
 800072a:	4013      	ands	r3, r2
 800072c:	0019      	movs	r1, r3
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a06      	ldr	r2, [pc, #24]	; (800074c <LL_DMA_SetDataTransferDirection+0x44>)
 8000734:	5cd3      	ldrb	r3, [r2, r3]
 8000736:	001a      	movs	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b006      	add	sp, #24
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	080031b4 	.word	0x080031b4
 8000750:	ffffbfef 	.word	0xffffbfef

08000754 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LL_DMA_SetMode+0x44>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	001a      	movs	r2, r3
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2220      	movs	r2, #32
 8000776:	4393      	bics	r3, r2
 8000778:	0019      	movs	r1, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <LL_DMA_SetMode+0x44>)
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	001a      	movs	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	18d3      	adds	r3, r2, r3
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
             Mode);
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b006      	add	sp, #24
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	080031b4 	.word	0x080031b4

0800079c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	001a      	movs	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	4393      	bics	r3, r2
 80007c0:	0019      	movs	r1, r3
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	001a      	movs	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	18d3      	adds	r3, r2, r3
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b006      	add	sp, #24
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	080031b4 	.word	0x080031b4

080007e4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LL_DMA_SetMemoryIncMode+0x44>)
 80007fa:	5cd3      	ldrb	r3, [r2, r3]
 80007fc:	001a      	movs	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	4393      	bics	r3, r2
 8000808:	0019      	movs	r1, r3
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	3b01      	subs	r3, #1
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <LL_DMA_SetMemoryIncMode+0x44>)
 8000810:	5cd3      	ldrb	r3, [r2, r3]
 8000812:	001a      	movs	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	430a      	orrs	r2, r1
 800081c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b006      	add	sp, #24
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	080031b4 	.word	0x080031b4

0800082c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3b01      	subs	r3, #1
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LL_DMA_SetPeriphSize+0x44>)
 8000842:	5cd3      	ldrb	r3, [r2, r3]
 8000844:	001a      	movs	r2, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a09      	ldr	r2, [pc, #36]	; (8000874 <LL_DMA_SetPeriphSize+0x48>)
 800084e:	4013      	ands	r3, r2
 8000850:	0019      	movs	r1, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	3b01      	subs	r3, #1
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <LL_DMA_SetPeriphSize+0x44>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	001a      	movs	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	18d3      	adds	r3, r2, r3
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b006      	add	sp, #24
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	080031b4 	.word	0x080031b4
 8000874:	fffffcff 	.word	0xfffffcff

08000878 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3b01      	subs	r3, #1
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <LL_DMA_SetMemorySize+0x44>)
 800088e:	5cd3      	ldrb	r3, [r2, r3]
 8000890:	001a      	movs	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	18d3      	adds	r3, r2, r3
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <LL_DMA_SetMemorySize+0x48>)
 800089a:	4013      	ands	r3, r2
 800089c:	0019      	movs	r1, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <LL_DMA_SetMemorySize+0x44>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	001a      	movs	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	18d3      	adds	r3, r2, r3
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b006      	add	sp, #24
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	080031b4 	.word	0x080031b4
 80008c0:	fffff3ff 	.word	0xfffff3ff

080008c4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80008da:	5cd3      	ldrb	r3, [r2, r3]
 80008dc:	001a      	movs	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	18d3      	adds	r3, r2, r3
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a09      	ldr	r2, [pc, #36]	; (800090c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008e6:	4013      	ands	r3, r2
 80008e8:	0019      	movs	r1, r3
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a06      	ldr	r2, [pc, #24]	; (8000908 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	001a      	movs	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	18d3      	adds	r3, r2, r3
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
             Priority);
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b006      	add	sp, #24
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	080031b4 	.word	0x080031b4
 800090c:	ffffcfff 	.word	0xffffcfff

08000910 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	3b01      	subs	r3, #1
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LL_DMA_SetDataLength+0x40>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	001a      	movs	r2, r3
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	0c1b      	lsrs	r3, r3, #16
 8000932:	0419      	lsls	r1, r3, #16
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3b01      	subs	r3, #1
 8000938:	4a05      	ldr	r2, [pc, #20]	; (8000950 <LL_DMA_SetDataLength+0x40>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	001a      	movs	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	18d3      	adds	r3, r2, r3
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	430a      	orrs	r2, r1
 8000946:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b006      	add	sp, #24
 800094e:	bd80      	pop	{r7, pc}
 8000950:	080031b4 	.word	0x080031b4

08000954 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, MemoryAddress);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <LL_DMA_SetMemoryAddress+0x2c>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	001a      	movs	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	60da      	str	r2, [r3, #12]
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b006      	add	sp, #24
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	080031b4 	.word	0x080031b4

08000984 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, PeriphAddress);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <LL_DMA_SetPeriphAddress+0x2c>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	001a      	movs	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	609a      	str	r2, [r3, #8]
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b006      	add	sp, #24
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	080031b4 	.word	0x080031b4

080009b4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LL_DMA_SetPeriphRequest+0x38>)
 80009c4:	4694      	mov	ip, r2
 80009c6:	4463      	add	r3, ip
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	4393      	bics	r3, r2
 80009d0:	0019      	movs	r1, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4a05      	ldr	r2, [pc, #20]	; (80009ec <LL_DMA_SetPeriphRequest+0x38>)
 80009d6:	4694      	mov	ip, r2
 80009d8:	4463      	add	r3, ip
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	430a      	orrs	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	100081ff 	.word	0x100081ff

080009f0 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2202      	movs	r2, #2
 80009fc:	605a      	str	r2, [r3, #4]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LL_DMA_EnableIT_TC+0x3c>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	001a      	movs	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4906      	ldr	r1, [pc, #24]	; (8000a44 <LL_DMA_EnableIT_TC+0x3c>)
 8000a2c:	5ccb      	ldrb	r3, [r1, r3]
 8000a2e:	0019      	movs	r1, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	18cb      	adds	r3, r1, r3
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	080031b4 	.word	0x080031b4

08000a48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	619a      	str	r2, [r3, #24]
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	000a      	movs	r2, r1
 8000a82:	1cfb      	adds	r3, r7, #3
 8000a84:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	330c      	adds	r3, #12
 8000a8a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	1cfa      	adds	r2, r7, #3
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b004      	add	sp, #16
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <OLED_SignalMode>:
uint8_t OLED_SHOW_BUFF[OLED_Page_Number][OLED_Resolution_Column];

//切换信号模式
//OLED_DataSignal数据模式，OLED_ComSignal指令模式
void OLED_SignalMode(uint8_t MODE)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
	if(MODE)
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <OLED_SignalMode+0x22>
		OLED_DC_RESET();//指令模式
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff ffd2 	bl	8000a60 <LL_GPIO_ResetOutputPin>
	else
		OLED_DC_SET();//数据模式
}
 8000abc:	e005      	b.n	8000aca <OLED_SignalMode+0x2e>
		OLED_DC_SET();//数据模式
 8000abe:	23a0      	movs	r3, #160	; 0xa0
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ffbf 	bl	8000a48 <LL_GPIO_SetOutputPin>
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <OLED_CS>:

//切换屏幕使能
//OLED_CSON使能屏幕，OLED_CSOFF失能屏幕
void OLED_CS(uint8_t ONOFF)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	0002      	movs	r2, r0
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	701a      	strb	r2, [r3, #0]
	if(ONOFF)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <OLED_CS+0x22>
		OLED_CS_RESET();//使能屏幕，可以通讯
 8000ae6:	23a0      	movs	r3, #160	; 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ffb7 	bl	8000a60 <LL_GPIO_ResetOutputPin>
	else
		OLED_CS_SET();//失能屏幕，停止通讯
}
 8000af2:	e005      	b.n	8000b00 <OLED_CS+0x2e>
		OLED_CS_SET();//失能屏幕，停止通讯
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff ffa4 	bl	8000a48 <LL_GPIO_SetOutputPin>
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <OLED_RESET>:

//OLED硬件复位
void OLED_RESET()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	OLED_RES_RESET();
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2110      	movs	r1, #16
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ffa4 	bl	8000a60 <LL_GPIO_ResetOutputPin>
	OLED_Delay(2);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f002 fae1 	bl	80030e0 <LL_mDelay>
	OLED_RES_SET();
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2110      	movs	r1, #16
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff8f 	bl	8000a48 <LL_GPIO_SetOutputPin>
	OLED_Delay(2);
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f002 fad8 	bl	80030e0 <LL_mDelay>
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <OLED_Init>:

//OLED上电初始化设置
void OLED_Init()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	OLED_GPIO_Init();//初始化OLED功能IO口
 8000b3e:	f000 f94f 	bl	8000de0 <OLED_GPIO_Init>
	OLED_CS(OLED_CSON);//使能屏幕
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff ffc5 	bl	8000ad2 <OLED_CS>
	OLED_RESET();//复位OLED
 8000b48:	f7ff ffde 	bl	8000b08 <OLED_RESET>
	OLED_SignalMode(OLED_ComSignal);//指令信号模式
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff ffa5 	bl	8000a9c <OLED_SignalMode>

	//设置行寻址模式(使用SPI全屏更新,数据指针从第1页第1列移动到最后1页最后1列再回到始点)
	OLED_Write_Byte(0x20);
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <OLED_Init+0x134>)
 8000b54:	2120      	movs	r1, #32
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ff8e 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0x00);
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <OLED_Init+0x134>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff89 	bl	8000a78 <LL_SPI_TransmitData8>
	//列地址范围与偏移像素设置
	OLED_Write_Byte(0x21);
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <OLED_Init+0x134>)
 8000b68:	2121      	movs	r1, #33	; 0x21
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff ff84 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0x00);
 8000b70:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <OLED_Init+0x134>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff7f 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte((uint8_t)(OLED_Resolution_Column-1));
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <OLED_Init+0x134>)
 8000b7c:	217f      	movs	r1, #127	; 0x7f
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7a 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置页行地址范围为0到屏幕最大页数
	OLED_Write_Byte(0x22);
 8000b84:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <OLED_Init+0x134>)
 8000b86:	2122      	movs	r1, #34	; 0x22
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff75 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0x00);//从0页
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <OLED_Init+0x134>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff70 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte((uint8_t)OLED_Page_Number-1);//到最大页数
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <OLED_Init+0x134>)
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff6b 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置对比度（最大）
	OLED_Write_Byte(0x81);
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <OLED_Init+0x134>)
 8000ba4:	2181      	movs	r1, #129	; 0x81
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff66 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0xFF);
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <OLED_Init+0x134>)
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff61 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置屏幕刷新率（最高频率）
	OLED_Write_Byte(0xD5);
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <OLED_Init+0x134>)
 8000bb8:	21d5      	movs	r1, #213	; 0xd5
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ff5c 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0xF0);
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <OLED_Init+0x134>)
 8000bc2:	21f0      	movs	r1, #240	; 0xf0
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ff57 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置复用率32根COM线，详情请翻阅SSD1306手册40页
	OLED_Write_Byte(0xA8);
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <OLED_Init+0x134>)
 8000bcc:	21a8      	movs	r1, #168	; 0xa8
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff ff52 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(OLED_Resolution_Row-1);
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <OLED_Init+0x134>)
 8000bd6:	211f      	movs	r1, #31
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff4d 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置COM脚硬件配置(COM脚按物理顺序，禁用左右映射)
	OLED_Write_Byte(0xDA);
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <OLED_Init+0x134>)
 8000be0:	21da      	movs	r1, #218	; 0xda
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff ff48 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0x02);
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <OLED_Init+0x134>)
 8000bea:	2102      	movs	r1, #2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff43 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置左右翻转
	OLED_Write_Byte(0xA1);
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <OLED_Init+0x134>)
 8000bf4:	21a1      	movs	r1, #161	; 0xa1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff ff3e 	bl	8000a78 <LL_SPI_TransmitData8>
	//设置上下翻转(从COM高位向低位扫描)
	OLED_Write_Byte(0xC8);
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <OLED_Init+0x134>)
 8000bfe:	21c8      	movs	r1, #200	; 0xc8
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ff39 	bl	8000a78 <LL_SPI_TransmitData8>
	//开启电荷泵
	OLED_Write_Byte(0x8d);
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <OLED_Init+0x134>)
 8000c08:	218d      	movs	r1, #141	; 0x8d
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff ff34 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0x14);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <OLED_Init+0x134>)
 8000c12:	2114      	movs	r1, #20
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff2f 	bl	8000a78 <LL_SPI_TransmitData8>

	//清屏
	OLED_SignalMode(OLED_DataSignal);//数据信号模式
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff ff3e 	bl	8000a9c <OLED_SignalMode>
	for(uint16_t i=0;i<512;i++)
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
 8000c26:	e009      	b.n	8000c3c <OLED_Init+0x104>
		OLED_Write_Byte(0x00);//填充空数据
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <OLED_Init+0x134>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff23 	bl	8000a78 <LL_SPI_TransmitData8>
	for(uint16_t i=0;i<512;i++)
 8000c32:	1dbb      	adds	r3, r7, #6
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	1dbb      	adds	r3, r7, #6
 8000c38:	3201      	adds	r2, #1
 8000c3a:	801a      	strh	r2, [r3, #0]
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <OLED_Init+0x138>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d9f0      	bls.n	8000c28 <OLED_Init+0xf0>

	//指令信号模式
	OLED_SignalMode(OLED_ComSignal);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff ff28 	bl	8000a9c <OLED_SignalMode>
	OLED_Write_Byte(0xAF);//开启显示
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <OLED_Init+0x134>)
 8000c4e:	21af      	movs	r1, #175	; 0xaf
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ff11 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Delay(100);//等待屏幕运行稳定
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f002 fa42 	bl	80030e0 <LL_mDelay>
	OLED_CS(OLED_CSOFF);//失能屏幕
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ff38 	bl	8000ad2 <OLED_CS>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	40003800 	.word	0x40003800
 8000c70:	000001ff 	.word	0x000001ff

08000c74 <OLED_PointerReset>:

void OLED_PointerReset()//指针复位到原点
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	OLED_SignalMode(OLED_ComSignal);//指令信号模式
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff0f 	bl	8000a9c <OLED_SignalMode>
	OLED_Write_Byte(0x00);//设置指针光标列低4位地址0
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <OLED_PointerReset+0x34>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fef8 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0x10);//设置指针列高4位地址0
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <OLED_PointerReset+0x34>)
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff fef3 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_Write_Byte(0xB0);//设置指针页地址0
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <OLED_PointerReset+0x34>)
 8000c94:	21b0      	movs	r1, #176	; 0xb0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff feee 	bl	8000a78 <LL_SPI_TransmitData8>
	OLED_SignalMode(OLED_DataSignal);//数据信号模式
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fefd 	bl	8000a9c <OLED_SignalMode>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40003800 	.word	0x40003800

08000cac <OLED_SCANALL>:

uint8_t OLED_SCANALL()//DMA开始一次全屏刷新
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	if(SPI2_BSY == 0)
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <OLED_SCANALL+0x40>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d115      	bne.n	8000ce4 <OLED_SCANALL+0x38>
	{
		SPI2_BSY = 1 ;//表示我即将占用SPI2
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <OLED_SCANALL+0x40>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
		OLED_CS(OLED_CSON);//使能屏幕
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ff07 	bl	8000ad2 <OLED_CS>
		OLED_PointerReset();//指针复位到屏幕左上角原点
 8000cc4:	f7ff ffd6 	bl	8000c74 <OLED_PointerReset>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, OLED_SHOW_BUFF_BYTES_NUMBER);//设置数据长度
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <OLED_SCANALL+0x44>)
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	f7ff fe1d 	bl	8000910 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);//开启通道
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <OLED_SCANALL+0x44>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fcd4 	bl	8000688 <LL_DMA_EnableChannel>
		return 1 ;//刷新成功返回1
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <OLED_SCANALL+0x3a>
	}
	else
		return 0 ;//刷新失败返回0
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000002a 	.word	0x2000002a
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler()//完成一次DMA传输回到此处，复位显示指针，关闭SPI占用
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA1);//清除中断标志
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <DMA1_Channel1_IRQHandler+0x28>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fe78 	bl	80009f0 <LL_DMA_ClearFlag_TC1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);//关闭通道
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <DMA1_Channel1_IRQHandler+0x28>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff fcdf 	bl	80006c8 <LL_DMA_DisableChannel>
	OLED_CS(OLED_CSOFF);//失能屏幕
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fee1 	bl	8000ad2 <OLED_CS>
	SPI2_BSY = 0 ;//释放SPI占用标志位
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <DMA1_Channel1_IRQHandler+0x2c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	2000002a 	.word	0x2000002a

08000d24 <OLED_DMA_Init>:

void OLED_DMA_Init()//OLED DMA初始化
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	//打开DMA时钟
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fc81 	bl	8000630 <LL_AHB1_GRP1_EnableClock>
	//设置DMA模式
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fd0d 	bl	8000754 <LL_DMA_SetMode>
	//DMA设置通道优先级
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2101      	movs	r1, #1
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fdbf 	bl	80008c4 <LL_DMA_SetChannelPriorityLevel>
	//DMA设置传输方向
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d48:	2210      	movs	r2, #16
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fcdb 	bl	8000708 <LL_DMA_SetDataTransferDirection>
	//DMA设置传输数据的长度（一次DMA传输的量）
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, OLED_SHOW_BUFF_BYTES_NUMBER);
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d58:	001a      	movs	r2, r3
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	f7ff fdd8 	bl	8000910 <LL_DMA_SetDataLength>
	//DMA设置内存的地址
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&OLED_SHOW_BUFF);
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <OLED_DMA_Init+0xb4>)
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d64:	001a      	movs	r2, r3
 8000d66:	2101      	movs	r1, #1
 8000d68:	f7ff fdf4 	bl	8000954 <LL_DMA_SetMemoryAddress>
	//设置内存储存单位的大小
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2101      	movs	r1, #1
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fd80 	bl	8000878 <LL_DMA_SetMemorySize>
	//设置内存地址增量模式
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fd30 	bl	80007e4 <LL_DMA_SetMemoryIncMode>
	//设置外设地址
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&SPI2->DR);
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <OLED_DMA_Init+0xb8>)
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fdfa 	bl	8000984 <LL_DMA_SetPeriphAddress>
	//设置外设存寄存器单位大小
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fd48 	bl	800082c <LL_DMA_SetPeriphSize>
	//设置外设地址增量模式
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_NOINCREMENT);
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2101      	movs	r1, #1
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fcfa 	bl	800079c <LL_DMA_SetPeriphIncMode>
	//设置外设请求
	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_SPI2_TX);
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000daa:	2213      	movs	r2, #19
 8000dac:	2101      	movs	r1, #1
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fe00 	bl	80009b4 <LL_DMA_SetPeriphRequest>
	//使能传输完成中断
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <OLED_DMA_Init+0xb0>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fe25 	bl	8000a08 <LL_DMA_EnableIT_TC>

	NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2009      	movs	r0, #9
 8000dc2:	f7ff fbc7 	bl	8000554 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc6:	2009      	movs	r0, #9
 8000dc8:	f7ff fbaa 	bl	8000520 <__NVIC_EnableIRQ>
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	2000002c 	.word	0x2000002c
 8000ddc:	4000380c 	.word	0x4000380c

08000de0 <OLED_GPIO_Init>:

void OLED_GPIO_Init()//OLED GPIO初始化函数，可修改为各固件库版本
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	003b      	movs	r3, r7
 8000de8:	0018      	movs	r0, r3
 8000dea:	2318      	movs	r3, #24
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f002 f9cc 	bl	800318c <memset>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff fc31 	bl	800065c <LL_IOP_GRP1_EnableClock>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	2110      	movs	r1, #16
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff fe2d 	bl	8000a60 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fe27 	bl	8000a60 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000e12:	23a0      	movs	r3, #160	; 0xa0
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fe21 	bl	8000a60 <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2210      	movs	r2, #16
 8000e22:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2201      	movs	r2, #1
 8000e28:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	003a      	movs	r2, r7
 8000e3e:	23a0      	movs	r3, #160	; 0xa0
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 f99e 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2201      	movs	r2, #1
 8000e54:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e56:	003b      	movs	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e5c:	003b      	movs	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e62:	003b      	movs	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	003a      	movs	r2, r7
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 f988 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	2201      	movs	r2, #1
 8000e80:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e88:	003b      	movs	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	003a      	movs	r2, r7
 8000e96:	23a0      	movs	r3, #160	; 0xa0
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 f972 	bl	8002186 <LL_GPIO_Init>
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b006      	add	sp, #24
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HUE2RGB>:
#include "rgb.h"

uint16_t RGB_HUE = 0 , RGB_VALUE = 5 ;//色相0-360和亮度0-10

void HUE2RGB(uint16_t HUE,uint16_t VALUE)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	801a      	strh	r2, [r3, #0]
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	1c0a      	adds	r2, r1, #0
 8000f04:	801a      	strh	r2, [r3, #0]
	//HUE*VALUE不能大于TIM Autoreload
	uint16_t R , G , B ;
	if(HUE<120)
 8000f06:	1dbb      	adds	r3, r7, #6
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	2b77      	cmp	r3, #119	; 0x77
 8000f0c:	d810      	bhi.n	8000f30 <HUE2RGB+0x3c>
	{
		R = 120 - HUE ;
 8000f0e:	230e      	movs	r3, #14
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	1dba      	adds	r2, r7, #6
 8000f14:	8812      	ldrh	r2, [r2, #0]
 8000f16:	2178      	movs	r1, #120	; 0x78
 8000f18:	1a8a      	subs	r2, r1, r2
 8000f1a:	801a      	strh	r2, [r3, #0]
		G = HUE ;
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	1dba      	adds	r2, r7, #6
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	801a      	strh	r2, [r3, #0]
		B = 0 ;
 8000f26:	230a      	movs	r3, #10
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	e027      	b.n	8000f80 <HUE2RGB+0x8c>
	}
	else if(HUE<240)
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	2bef      	cmp	r3, #239	; 0xef
 8000f36:	d811      	bhi.n	8000f5c <HUE2RGB+0x68>
	{
		R = 0 ;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
		G = 240 - HUE ;
 8000f40:	230c      	movs	r3, #12
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	1dba      	adds	r2, r7, #6
 8000f46:	8812      	ldrh	r2, [r2, #0]
 8000f48:	21f0      	movs	r1, #240	; 0xf0
 8000f4a:	1a8a      	subs	r2, r1, r2
 8000f4c:	801a      	strh	r2, [r3, #0]
		B = HUE - 120 ;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	1dba      	adds	r2, r7, #6
 8000f54:	8812      	ldrh	r2, [r2, #0]
 8000f56:	3a78      	subs	r2, #120	; 0x78
 8000f58:	801a      	strh	r2, [r3, #0]
 8000f5a:	e011      	b.n	8000f80 <HUE2RGB+0x8c>
	}
	else
	{
		R = HUE - 240;
 8000f5c:	230e      	movs	r3, #14
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	1dba      	adds	r2, r7, #6
 8000f62:	8812      	ldrh	r2, [r2, #0]
 8000f64:	3af0      	subs	r2, #240	; 0xf0
 8000f66:	801a      	strh	r2, [r3, #0]
		G = 0 ;
 8000f68:	230c      	movs	r3, #12
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
		B = 360 - HUE;
 8000f70:	230a      	movs	r3, #10
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	1dba      	adds	r2, r7, #6
 8000f76:	8812      	ldrh	r2, [r2, #0]
 8000f78:	21b4      	movs	r1, #180	; 0xb4
 8000f7a:	0049      	lsls	r1, r1, #1
 8000f7c:	1a8a      	subs	r2, r1, r2
 8000f7e:	801a      	strh	r2, [r3, #0]
	}
	RGB_Set_R(R*VALUE);
 8000f80:	230e      	movs	r3, #14
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	8812      	ldrh	r2, [r2, #0]
 8000f8a:	4353      	muls	r3, r2
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HUE2RGB+0xdc>)
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff ff89 	bl	8000eaa <LL_TIM_OC_SetCompareCH2>
	RGB_Set_G(G*VALUE);
 8000f98:	230c      	movs	r3, #12
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	8812      	ldrh	r2, [r2, #0]
 8000fa2:	4353      	muls	r3, r2
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HUE2RGB+0xdc>)
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f7ff ff89 	bl	8000ec2 <LL_TIM_OC_SetCompareCH3>
	RGB_Set_B(B*VALUE);
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	8812      	ldrh	r2, [r2, #0]
 8000fba:	4353      	muls	r3, r2
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HUE2RGB+0xdc>)
 8000fc0:	0011      	movs	r1, r2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff ff89 	bl	8000eda <LL_TIM_OC_SetCompareCH4>
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b004      	add	sp, #16
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <LL_APB1_GRP1_EnableClock>:
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x28>)
 8000fde:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x28>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x28>)
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b004      	add	sp, #16
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <LL_IOP_GRP1_EnableClock>:
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <LL_IOP_GRP1_EnableClock+0x28>)
 800100a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <LL_IOP_GRP1_EnableClock+0x28>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	430a      	orrs	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <LL_IOP_GRP1_EnableClock+0x28>)
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b004      	add	sp, #16
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000

0800102c <LL_SPI_Enable>:
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2240      	movs	r2, #64	; 0x40
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_SPI_SetStandard>:
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2210      	movs	r2, #16
 8001058:	4393      	bics	r3, r2
 800105a:	001a      	movs	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	605a      	str	r2, [r3, #4]
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <LL_SPI_DisableNSSPulseMgt>:
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2208      	movs	r2, #8
 800107a:	4393      	bics	r3, r2
 800107c:	001a      	movs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	605a      	str	r2, [r3, #4]
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}

0800108a <LL_SPI_EnableDMAReq_TX>:
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SPI2_Init>:
#include"spi.h"

uint8_t SPI2_BSY = 0 ;//SPI2占用标志位

void SPI2_Init()
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b091      	sub	sp, #68	; 0x44
 80010ac:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ae:	2418      	movs	r4, #24
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	0018      	movs	r0, r3
 80010b4:	2328      	movs	r3, #40	; 0x28
 80010b6:	001a      	movs	r2, r3
 80010b8:	2100      	movs	r1, #0
 80010ba:	f002 f867 	bl	800318c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	003b      	movs	r3, r7
 80010c0:	0018      	movs	r0, r3
 80010c2:	2318      	movs	r3, #24
 80010c4:	001a      	movs	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	f002 f860 	bl	800318c <memset>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	01db      	lsls	r3, r3, #7
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff7f 	bl	8000fd4 <LL_APB1_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80010d6:	2002      	movs	r0, #2
 80010d8:	f7ff ff92 	bl	8001000 <LL_IOP_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB10   ------> SPI2_SCK
	PB11   ------> SPI2_MOSI
	*/
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	003b      	movs	r3, r7
 80010de:	4a3a      	ldr	r2, [pc, #232]	; (80011c8 <SPI2_Init+0x120>)
 80010e0:	0019      	movs	r1, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	f001 f84f 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80010e8:	003b      	movs	r3, r7
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	00d2      	lsls	r2, r2, #3
 80010ee:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010f0:	003b      	movs	r3, r7
 80010f2:	2202      	movs	r2, #2
 80010f4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010f6:	003b      	movs	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fc:	003b      	movs	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	003b      	movs	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001108:	003b      	movs	r3, r7
 800110a:	2205      	movs	r2, #5
 800110c:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	003b      	movs	r3, r7
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <SPI2_Init+0x120>)
 8001112:	0019      	movs	r1, r3
 8001114:	0010      	movs	r0, r2
 8001116:	f001 f836 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800111a:	003b      	movs	r3, r7
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001122:	003b      	movs	r3, r7
 8001124:	2202      	movs	r2, #2
 8001126:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001128:	003b      	movs	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112e:	003b      	movs	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001134:	003b      	movs	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800113a:	003b      	movs	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	003b      	movs	r3, r7
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <SPI2_Init+0x120>)
 8001144:	0019      	movs	r1, r3
 8001146:	0010      	movs	r0, r2
 8001148:	f001 f81d 	bl	8002186 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800114c:	0021      	movs	r1, r4
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2282      	movs	r2, #130	; 0x82
 8001158:	0052      	lsls	r2, r2, #1
 800115a:	605a      	str	r2, [r3, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	22e0      	movs	r2, #224	; 0xe0
 8001160:	00d2      	lsls	r2, r2, #3
 8001162:	609a      	str	r2, [r3, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	615a      	str	r2, [r3, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
	SPI_InitStruct.CRCPoly = 7;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2207      	movs	r2, #7
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001190:	187b      	adds	r3, r7, r1
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <SPI2_Init+0x124>)
 8001194:	0019      	movs	r1, r3
 8001196:	0010      	movs	r0, r2
 8001198:	f001 fa04 	bl	80025a4 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <SPI2_Init+0x124>)
 800119e:	2100      	movs	r1, #0
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff ff51 	bl	8001048 <LL_SPI_SetStandard>
	LL_SPI_DisableNSSPulseMgt(SPI2);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <SPI2_Init+0x124>)
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ff5f 	bl	800106c <LL_SPI_DisableNSSPulseMgt>
	LL_SPI_EnableDMAReq_TX(SPI2);
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <SPI2_Init+0x124>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff6a 	bl	800108a <LL_SPI_EnableDMAReq_TX>
	LL_SPI_Enable(SPI2);
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SPI2_Init+0x124>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff37 	bl	800102c <LL_SPI_Enable>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b011      	add	sp, #68	; 0x44
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	50000400 	.word	0x50000400
 80011cc:	40003800 	.word	0x40003800

080011d0 <NMI_Handler>:
#include "main.h"
#include "stm32g0xx_it.h"

void NMI_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HardFault_Handler>:

void HardFault_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <PendSV_Handler>:

void PendSV_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0

}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <SystemInit+0x14>)
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	0512      	lsls	r2, r2, #20
 800120a:	609a      	str	r2, [r3, #8]
#endif
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b7f      	cmp	r3, #127	; 0x7f
 800122a:	d809      	bhi.n	8001240 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	001a      	movs	r2, r3
 8001232:	231f      	movs	r3, #31
 8001234:	401a      	ands	r2, r3
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_EnableIRQ+0x30>)
 8001238:	2101      	movs	r1, #1
 800123a:	4091      	lsls	r1, r2
 800123c:	000a      	movs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	0002      	movs	r2, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b7f      	cmp	r3, #127	; 0x7f
 8001260:	d828      	bhi.n	80012b4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <__NVIC_SetPriority+0xd4>)
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	33c0      	adds	r3, #192	; 0xc0
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	589b      	ldr	r3, [r3, r2]
 8001272:	1dfa      	adds	r2, r7, #7
 8001274:	7812      	ldrb	r2, [r2, #0]
 8001276:	0011      	movs	r1, r2
 8001278:	2203      	movs	r2, #3
 800127a:	400a      	ands	r2, r1
 800127c:	00d2      	lsls	r2, r2, #3
 800127e:	21ff      	movs	r1, #255	; 0xff
 8001280:	4091      	lsls	r1, r2
 8001282:	000a      	movs	r2, r1
 8001284:	43d2      	mvns	r2, r2
 8001286:	401a      	ands	r2, r3
 8001288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	019b      	lsls	r3, r3, #6
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	401a      	ands	r2, r3
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	0018      	movs	r0, r3
 8001298:	2303      	movs	r3, #3
 800129a:	4003      	ands	r3, r0
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a0:	481f      	ldr	r0, [pc, #124]	; (8001320 <__NVIC_SetPriority+0xd4>)
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	430a      	orrs	r2, r1
 80012ac:	33c0      	adds	r3, #192	; 0xc0
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	501a      	str	r2, [r3, r0]
}
 80012b2:	e031      	b.n	8001318 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <__NVIC_SetPriority+0xd8>)
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	0019      	movs	r1, r3
 80012bc:	230f      	movs	r3, #15
 80012be:	400b      	ands	r3, r1
 80012c0:	3b08      	subs	r3, #8
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3306      	adds	r3, #6
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1dfa      	adds	r2, r7, #7
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	0011      	movs	r1, r2
 80012d4:	2203      	movs	r2, #3
 80012d6:	400a      	ands	r2, r1
 80012d8:	00d2      	lsls	r2, r2, #3
 80012da:	21ff      	movs	r1, #255	; 0xff
 80012dc:	4091      	lsls	r1, r2
 80012de:	000a      	movs	r2, r1
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	401a      	ands	r2, r3
 80012e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	401a      	ands	r2, r3
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	2303      	movs	r3, #3
 80012f6:	4003      	ands	r3, r0
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <__NVIC_SetPriority+0xd8>)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	001c      	movs	r4, r3
 8001304:	230f      	movs	r3, #15
 8001306:	4023      	ands	r3, r4
 8001308:	3b08      	subs	r3, #8
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	430a      	orrs	r2, r1
 800130e:	3306      	adds	r3, #6
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	18c3      	adds	r3, r0, r3
 8001314:	3304      	adds	r3, #4
 8001316:	601a      	str	r2, [r3, #0]
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b003      	add	sp, #12
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <LL_APB1_GRP1_EnableClock>:
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <LL_APB1_GRP1_EnableClock+0x28>)
 8001332:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <LL_APB1_GRP1_EnableClock+0x28>)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	430a      	orrs	r2, r1
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <LL_APB1_GRP1_EnableClock+0x28>)
 800133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b004      	add	sp, #16
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000

08001354 <LL_IOP_GRP1_EnableClock>:
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <LL_IOP_GRP1_EnableClock+0x28>)
 800135e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <LL_IOP_GRP1_EnableClock+0x28>)
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	430a      	orrs	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <LL_IOP_GRP1_EnableClock+0x28>)
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b004      	add	sp, #16
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <LL_TIM_EnableCounter>:
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <LL_TIM_EnableARRPreload>:
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <LL_TIM_OC_DisableFast>:
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d02c      	beq.n	8001422 <LL_TIM_OC_DisableFast+0x6a>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d027      	beq.n	800141e <LL_TIM_OC_DisableFast+0x66>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b10      	cmp	r3, #16
 80013d2:	d022      	beq.n	800141a <LL_TIM_OC_DisableFast+0x62>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b40      	cmp	r3, #64	; 0x40
 80013d8:	d01d      	beq.n	8001416 <LL_TIM_OC_DisableFast+0x5e>
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d016      	beq.n	8001412 <LL_TIM_OC_DisableFast+0x5a>
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d00f      	beq.n	800140e <LL_TIM_OC_DisableFast+0x56>
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	015b      	lsls	r3, r3, #5
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d008      	beq.n	800140a <LL_TIM_OC_DisableFast+0x52>
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	025b      	lsls	r3, r3, #9
 80013fe:	429a      	cmp	r2, r3
 8001400:	d101      	bne.n	8001406 <LL_TIM_OC_DisableFast+0x4e>
 8001402:	2307      	movs	r3, #7
 8001404:	e00e      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 8001406:	2308      	movs	r3, #8
 8001408:	e00c      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 800140a:	2306      	movs	r3, #6
 800140c:	e00a      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <LL_TIM_OC_DisableFast+0x6c>
 8001422:	2300      	movs	r3, #0
 8001424:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3318      	adds	r3, #24
 800142a:	001a      	movs	r2, r3
 800142c:	0029      	movs	r1, r5
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <LL_TIM_OC_DisableFast+0x9c>)
 8001430:	5c5b      	ldrb	r3, [r3, r1]
 8001432:	18d3      	adds	r3, r2, r3
 8001434:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	0029      	movs	r1, r5
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <LL_TIM_OC_DisableFast+0xa0>)
 800143c:	5c52      	ldrb	r2, [r2, r1]
 800143e:	0011      	movs	r1, r2
 8001440:	2204      	movs	r2, #4
 8001442:	408a      	lsls	r2, r1
 8001444:	43d2      	mvns	r2, r2
 8001446:	4013      	ands	r3, r2
 8001448:	6023      	str	r3, [r4, #0]
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bdb0      	pop	{r4, r5, r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	0800321c 	.word	0x0800321c
 8001458:	08003228 	.word	0x08003228

0800145c <LL_TIM_OC_EnablePreload>:
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d02c      	beq.n	80014c6 <LL_TIM_OC_EnablePreload+0x6a>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b04      	cmp	r3, #4
 8001470:	d027      	beq.n	80014c2 <LL_TIM_OC_EnablePreload+0x66>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d022      	beq.n	80014be <LL_TIM_OC_EnablePreload+0x62>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b40      	cmp	r3, #64	; 0x40
 800147c:	d01d      	beq.n	80014ba <LL_TIM_OC_EnablePreload+0x5e>
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	429a      	cmp	r2, r3
 8001486:	d016      	beq.n	80014b6 <LL_TIM_OC_EnablePreload+0x5a>
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	429a      	cmp	r2, r3
 8001490:	d00f      	beq.n	80014b2 <LL_TIM_OC_EnablePreload+0x56>
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	015b      	lsls	r3, r3, #5
 8001498:	429a      	cmp	r2, r3
 800149a:	d008      	beq.n	80014ae <LL_TIM_OC_EnablePreload+0x52>
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d101      	bne.n	80014aa <LL_TIM_OC_EnablePreload+0x4e>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e00e      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014aa:	2308      	movs	r3, #8
 80014ac:	e00c      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <LL_TIM_OC_EnablePreload+0x6c>
 80014c6:	2300      	movs	r3, #0
 80014c8:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3318      	adds	r3, #24
 80014ce:	001a      	movs	r2, r3
 80014d0:	0029      	movs	r1, r5
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <LL_TIM_OC_EnablePreload+0x98>)
 80014d4:	5c5b      	ldrb	r3, [r3, r1]
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	0029      	movs	r1, r5
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <LL_TIM_OC_EnablePreload+0x9c>)
 80014e0:	5c5b      	ldrb	r3, [r3, r1]
 80014e2:	0019      	movs	r1, r3
 80014e4:	2308      	movs	r3, #8
 80014e6:	408b      	lsls	r3, r1
 80014e8:	4313      	orrs	r3, r2
 80014ea:	6023      	str	r3, [r4, #0]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bdb0      	pop	{r4, r5, r7, pc}
 80014f4:	0800321c 	.word	0x0800321c
 80014f8:	08003228 	.word	0x08003228

080014fc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <LL_TIM_SetClockSource+0x24>)
 800150c:	401a      	ands	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	609a      	str	r2, [r3, #8]
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	fffebff8 	.word	0xfffebff8

08001524 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2270      	movs	r2, #112	; 0x70
 8001534:	4393      	bics	r3, r2
 8001536:	001a      	movs	r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}

08001548 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	4393      	bics	r3, r2
 8001558:	001a      	movs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0212      	lsls	r2, r2, #8
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}

08001584 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	4252      	negs	r2, r2
 8001592:	611a      	str	r2, [r3, #16]
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <TIM3_Init>:

#define TIM3FD 		50
uint8_t TIM3FD_i = TIM3FD ;

void TIM3_Init()
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015be:	253c      	movs	r5, #60	; 0x3c
 80015c0:	197b      	adds	r3, r7, r5
 80015c2:	0018      	movs	r0, r3
 80015c4:	2314      	movs	r3, #20
 80015c6:	001a      	movs	r2, r3
 80015c8:	2100      	movs	r1, #0
 80015ca:	f001 fddf 	bl	800318c <memset>
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80015ce:	241c      	movs	r4, #28
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	0018      	movs	r0, r3
 80015d4:	2320      	movs	r3, #32
 80015d6:	001a      	movs	r2, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	f001 fdd7 	bl	800318c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	0018      	movs	r0, r3
 80015e2:	2318      	movs	r3, #24
 80015e4:	001a      	movs	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f001 fdd0 	bl	800318c <memset>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f7ff fe9b 	bl	8001328 <LL_APB1_GRP1_EnableClock>
	TIM_InitStruct.Prescaler = 64;
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015f8:	197b      	adds	r3, r7, r5
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 1200;
 80015fe:	197b      	adds	r3, r7, r5
 8001600:	2296      	movs	r2, #150	; 0x96
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001606:	197b      	adds	r3, r7, r5
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800160c:	4b63      	ldr	r3, [pc, #396]	; (800179c <TIM3_Init+0x1e4>)
 800160e:	2100      	movs	r1, #0
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff ff73 	bl	80014fc <LL_TIM_SetClockSource>
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001616:	197b      	adds	r3, r7, r5
 8001618:	4a60      	ldr	r2, [pc, #384]	; (800179c <TIM3_Init+0x1e4>)
 800161a:	0019      	movs	r1, r3
 800161c:	0010      	movs	r0, r2
 800161e:	f001 f89b 	bl	8002758 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM3);
 8001622:	4b5e      	ldr	r3, [pc, #376]	; (800179c <TIM3_Init+0x1e4>)
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff feb9 	bl	800139c <LL_TIM_EnableARRPreload>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <TIM3_Init+0x1e4>)
 800162c:	2110      	movs	r1, #16
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff ff14 	bl	800145c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001634:	193b      	adds	r3, r7, r4
 8001636:	2260      	movs	r2, #96	; 0x60
 8001638:	601a      	str	r2, [r3, #0]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2201      	movs	r2, #1
 800163e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
	TIM_OC_InitStruct.CompareValue = 0;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	2202      	movs	r2, #2
 8001650:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001652:	193b      	adds	r3, r7, r4
 8001654:	4851      	ldr	r0, [pc, #324]	; (800179c <TIM3_Init+0x1e4>)
 8001656:	001a      	movs	r2, r3
 8001658:	2110      	movs	r1, #16
 800165a:	f001 f8eb 	bl	8002834 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 800165e:	4b4f      	ldr	r3, [pc, #316]	; (800179c <TIM3_Init+0x1e4>)
 8001660:	2110      	movs	r1, #16
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff fea8 	bl	80013b8 <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4a4b      	ldr	r2, [pc, #300]	; (800179c <TIM3_Init+0x1e4>)
 800166e:	0019      	movs	r1, r3
 8001670:	0010      	movs	r0, r2
 8001672:	f7ff fef3 	bl	800145c <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001676:	193a      	adds	r2, r7, r4
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4847      	ldr	r0, [pc, #284]	; (800179c <TIM3_Init+0x1e4>)
 800167e:	0019      	movs	r1, r3
 8001680:	f001 f8d8 	bl	8002834 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4a44      	ldr	r2, [pc, #272]	; (800179c <TIM3_Init+0x1e4>)
 800168a:	0019      	movs	r1, r3
 800168c:	0010      	movs	r0, r2
 800168e:	f7ff fe93 	bl	80013b8 <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	4a41      	ldr	r2, [pc, #260]	; (800179c <TIM3_Init+0x1e4>)
 8001698:	0019      	movs	r1, r3
 800169a:	0010      	movs	r0, r2
 800169c:	f7ff fede 	bl	800145c <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80016a0:	193a      	adds	r2, r7, r4
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	483d      	ldr	r0, [pc, #244]	; (800179c <TIM3_Init+0x1e4>)
 80016a8:	0019      	movs	r1, r3
 80016aa:	f001 f8c3 	bl	8002834 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	015b      	lsls	r3, r3, #5
 80016b2:	4a3a      	ldr	r2, [pc, #232]	; (800179c <TIM3_Init+0x1e4>)
 80016b4:	0019      	movs	r1, r3
 80016b6:	0010      	movs	r0, r2
 80016b8:	f7ff fe7e 	bl	80013b8 <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <TIM3_Init+0x1e4>)
 80016be:	2100      	movs	r1, #0
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff2f 	bl	8001524 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <TIM3_Init+0x1e4>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ff3d 	bl	8001548 <LL_TIM_DisableMasterSlaveMode>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fe40 	bl	8001354 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80016d4:	2002      	movs	r0, #2
 80016d6:	f7ff fe3d 	bl	8001354 <LL_IOP_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
	PA7   ------> TIM3_CH2
	PB0   ------> TIM3_CH3
	PB1   ------> TIM3_CH4
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2202      	movs	r2, #2
 80016e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2201      	movs	r2, #1
 80016fc:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	1d3a      	adds	r2, r7, #4
 8001700:	23a0      	movs	r3, #160	; 0xa0
 8001702:	05db      	lsls	r3, r3, #23
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fd3d 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2202      	movs	r2, #2
 8001716:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2201      	movs	r2, #1
 800172e:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <TIM3_Init+0x1e8>)
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f000 fd25 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2202      	movs	r2, #2
 8001746:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2201      	movs	r2, #1
 800175e:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <TIM3_Init+0x1e8>)
 8001764:	0019      	movs	r1, r3
 8001766:	0010      	movs	r0, r2
 8001768:	f000 fd0d 	bl	8002186 <LL_GPIO_Init>

	NVIC_SetPriority(TIM3_IRQn, 1);
 800176c:	2101      	movs	r1, #1
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff fd6c 	bl	800124c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8001774:	2010      	movs	r0, #16
 8001776:	f7ff fd4f 	bl	8001218 <__NVIC_EnableIRQ>

	LL_TIM_EnableAllOutputs(TIM3);
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <TIM3_Init+0x1e4>)
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fef2 	bl	8001566 <LL_TIM_EnableAllOutputs>
	LL_TIM_EnableIT_UPDATE(TIM3);
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <TIM3_Init+0x1e4>)
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff ff09 	bl	800159c <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <TIM3_Init+0x1e4>)
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff fdf7 	bl	8001380 <LL_TIM_EnableCounter>
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b014      	add	sp, #80	; 0x50
 8001798:	bdb0      	pop	{r4, r5, r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40000400 	.word	0x40000400
 80017a0:	50000400 	.word	0x50000400

080017a4 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM3);
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <TIM3_IRQHandler+0x5c>)
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff feea 	bl	8001584 <LL_TIM_ClearFlag_UPDATE>
	if(!TIM3FD_i)
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <TIM3_IRQHandler+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d11a      	bne.n	80017ee <TIM3_IRQHandler+0x4a>
	{
		RGB_HUE ++ ;
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <TIM3_IRQHandler+0x64>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <TIM3_IRQHandler+0x64>)
 80017c2:	801a      	strh	r2, [r3, #0]
		if(RGB_HUE>359)
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <TIM3_IRQHandler+0x64>)
 80017c6:	881a      	ldrh	r2, [r3, #0]
 80017c8:	2368      	movs	r3, #104	; 0x68
 80017ca:	33ff      	adds	r3, #255	; 0xff
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d902      	bls.n	80017d6 <TIM3_IRQHandler+0x32>
			RGB_HUE = 0 ;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <TIM3_IRQHandler+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	801a      	strh	r2, [r3, #0]
		HUE2RGB(RGB_HUE,RGB_VALUE);
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <TIM3_IRQHandler+0x64>)
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <TIM3_IRQHandler+0x68>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	0019      	movs	r1, r3
 80017e0:	0010      	movs	r0, r2
 80017e2:	f7ff fb87 	bl	8000ef4 <HUE2RGB>
		TIM3FD_i = TIM3FD ;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <TIM3_IRQHandler+0x60>)
 80017e8:	2232      	movs	r2, #50	; 0x32
 80017ea:	701a      	strb	r2, [r3, #0]
	}
	else
		TIM3FD_i-- ;//软件分频
}
 80017ec:	e005      	b.n	80017fa <TIM3_IRQHandler+0x56>
		TIM3FD_i-- ;//软件分频
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <TIM3_IRQHandler+0x60>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b03      	ldr	r3, [pc, #12]	; (8001804 <TIM3_IRQHandler+0x60>)
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40000400 	.word	0x40000400
 8001804:	20000008 	.word	0x20000008
 8001808:	20000028 	.word	0x20000028
 800180c:	20000000 	.word	0x20000000

08001810 <__NVIC_EnableIRQ>:
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	0002      	movs	r2, r0
 8001818:	1dfb      	adds	r3, r7, #7
 800181a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b7f      	cmp	r3, #127	; 0x7f
 8001822:	d809      	bhi.n	8001838 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	231f      	movs	r3, #31
 800182c:	401a      	ands	r2, r3
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_EnableIRQ+0x30>)
 8001830:	2101      	movs	r1, #1
 8001832:	4091      	lsls	r1, r2
 8001834:	000a      	movs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	0002      	movs	r2, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b7f      	cmp	r3, #127	; 0x7f
 8001858:	d828      	bhi.n	80018ac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185a:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <__NVIC_SetPriority+0xd4>)
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	33c0      	adds	r3, #192	; 0xc0
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	589b      	ldr	r3, [r3, r2]
 800186a:	1dfa      	adds	r2, r7, #7
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	0011      	movs	r1, r2
 8001870:	2203      	movs	r2, #3
 8001872:	400a      	ands	r2, r1
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	21ff      	movs	r1, #255	; 0xff
 8001878:	4091      	lsls	r1, r2
 800187a:	000a      	movs	r2, r1
 800187c:	43d2      	mvns	r2, r2
 800187e:	401a      	ands	r2, r3
 8001880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	22ff      	movs	r2, #255	; 0xff
 8001888:	401a      	ands	r2, r3
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	0018      	movs	r0, r3
 8001890:	2303      	movs	r3, #3
 8001892:	4003      	ands	r3, r0
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	481f      	ldr	r0, [pc, #124]	; (8001918 <__NVIC_SetPriority+0xd4>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	430a      	orrs	r2, r1
 80018a4:	33c0      	adds	r3, #192	; 0xc0
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	501a      	str	r2, [r3, r0]
}
 80018aa:	e031      	b.n	8001910 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <__NVIC_SetPriority+0xd8>)
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	0019      	movs	r1, r3
 80018b4:	230f      	movs	r3, #15
 80018b6:	400b      	ands	r3, r1
 80018b8:	3b08      	subs	r3, #8
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3306      	adds	r3, #6
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	18d3      	adds	r3, r2, r3
 80018c2:	3304      	adds	r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1dfa      	adds	r2, r7, #7
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	0011      	movs	r1, r2
 80018cc:	2203      	movs	r2, #3
 80018ce:	400a      	ands	r2, r1
 80018d0:	00d2      	lsls	r2, r2, #3
 80018d2:	21ff      	movs	r1, #255	; 0xff
 80018d4:	4091      	lsls	r1, r2
 80018d6:	000a      	movs	r2, r1
 80018d8:	43d2      	mvns	r2, r2
 80018da:	401a      	ands	r2, r3
 80018dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	22ff      	movs	r2, #255	; 0xff
 80018e4:	401a      	ands	r2, r3
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	0018      	movs	r0, r3
 80018ec:	2303      	movs	r3, #3
 80018ee:	4003      	ands	r3, r0
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <__NVIC_SetPriority+0xd8>)
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	001c      	movs	r4, r3
 80018fc:	230f      	movs	r3, #15
 80018fe:	4023      	ands	r3, r4
 8001900:	3b08      	subs	r3, #8
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	430a      	orrs	r2, r1
 8001906:	3306      	adds	r3, #6
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	18c3      	adds	r3, r0, r3
 800190c:	3304      	adds	r3, #4
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b003      	add	sp, #12
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <LL_AHB1_GRP1_EnableClock>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <LL_AHB1_GRP1_EnableClock+0x28>)
 800192a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <LL_AHB1_GRP1_EnableClock+0x28>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	430a      	orrs	r2, r1
 8001932:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000

0800194c <LL_APB2_GRP1_EnableClock>:
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <LL_APB2_GRP1_EnableClock+0x28>)
 8001956:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LL_APB2_GRP1_EnableClock+0x28>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	430a      	orrs	r2, r1
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <LL_APB2_GRP1_EnableClock+0x28>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4013      	ands	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000

08001978 <LL_IOP_GRP1_EnableClock>:
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	430a      	orrs	r2, r1
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <LL_IOP_GRP1_EnableClock+0x28>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <LL_DMA_EnableChannel>:
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel-1U]))->CCR, DMA_CCR_EN);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LL_DMA_EnableChannel+0x3c>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	001a      	movs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	18d3      	adds	r3, r2, r3
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4906      	ldr	r1, [pc, #24]	; (80019e0 <LL_DMA_EnableChannel+0x3c>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	0019      	movs	r1, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	18cb      	adds	r3, r1, r3
 80019d0:	2101      	movs	r1, #1
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	08003234 	.word	0x08003234

080019e4 <LL_DMA_SetDataTransferDirection>:
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LL_DMA_SetDataTransferDirection+0x44>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	001a      	movs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <LL_DMA_SetDataTransferDirection+0x48>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <LL_DMA_SetDataTransferDirection+0x44>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	001a      	movs	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	18d3      	adds	r3, r2, r3
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b006      	add	sp, #24
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	08003234 	.word	0x08003234
 8001a2c:	ffffbfef 	.word	0xffffbfef

08001a30 <LL_DMA_SetMode>:
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <LL_DMA_SetMode+0x44>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	001a      	movs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	4393      	bics	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <LL_DMA_SetMode+0x44>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	001a      	movs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	18d3      	adds	r3, r2, r3
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b006      	add	sp, #24
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	08003234 	.word	0x08003234

08001a78 <LL_DMA_SetPeriphIncMode>:
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <LL_DMA_SetPeriphIncMode+0x44>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	001a      	movs	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	18d3      	adds	r3, r2, r3
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2240      	movs	r2, #64	; 0x40
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <LL_DMA_SetPeriphIncMode+0x44>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b006      	add	sp, #24
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	08003234 	.word	0x08003234

08001ac0 <LL_DMA_SetMemoryIncMode>:
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LL_DMA_SetMemoryIncMode+0x44>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	18d3      	adds	r3, r2, r3
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <LL_DMA_SetMemoryIncMode+0x44>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	001a      	movs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	18d3      	adds	r3, r2, r3
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b006      	add	sp, #24
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	08003234 	.word	0x08003234

08001b08 <LL_DMA_SetPeriphSize>:
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LL_DMA_SetPeriphSize+0x44>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	001a      	movs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <LL_DMA_SetPeriphSize+0x48>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <LL_DMA_SetPeriphSize+0x44>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	001a      	movs	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	18d3      	adds	r3, r2, r3
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b006      	add	sp, #24
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	08003234 	.word	0x08003234
 8001b50:	fffffcff 	.word	0xfffffcff

08001b54 <LL_DMA_SetMemorySize>:
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <LL_DMA_SetMemorySize+0x44>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <LL_DMA_SetMemorySize+0x48>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <LL_DMA_SetMemorySize+0x44>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	001a      	movs	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	18d3      	adds	r3, r2, r3
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b006      	add	sp, #24
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	08003234 	.word	0x08003234
 8001b9c:	fffff3ff 	.word	0xfffff3ff

08001ba0 <LL_DMA_SetChannelPriorityLevel>:
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	001a      	movs	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	001a      	movs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	18d3      	adds	r3, r2, r3
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b006      	add	sp, #24
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	08003234 	.word	0x08003234
 8001be8:	ffffcfff 	.word	0xffffcfff

08001bec <LL_DMA_SetDataLength>:
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <LL_DMA_SetDataLength+0x40>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	001a      	movs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	0419      	lsls	r1, r3, #16
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <LL_DMA_SetDataLength+0x40>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	001a      	movs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	18d3      	adds	r3, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b006      	add	sp, #24
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	08003234 	.word	0x08003234

08001c30 <LL_DMA_SetMemoryAddress>:
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, MemoryAddress);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <LL_DMA_SetMemoryAddress+0x2c>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	001a      	movs	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	18d3      	adds	r3, r2, r3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	60da      	str	r2, [r3, #12]
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b006      	add	sp, #24
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	08003234 	.word	0x08003234

08001c60 <LL_DMA_SetPeriphAddress>:
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, PeriphAddress);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <LL_DMA_SetPeriphAddress+0x2c>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	001a      	movs	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b006      	add	sp, #24
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	08003234 	.word	0x08003234

08001c90 <LL_DMA_SetPeriphRequest>:
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LL_DMA_SetPeriphRequest+0x38>)
 8001ca0:	4694      	mov	ip, r2
 8001ca2:	4463      	add	r3, ip
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	22ff      	movs	r2, #255	; 0xff
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <LL_DMA_SetPeriphRequest+0x38>)
 8001cb2:	4694      	mov	ip, r2
 8001cb4:	4463      	add	r3, ip
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	100081ff 	.word	0x100081ff

08001ccc <LL_DMA_ClearFlag_TC2>:
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	605a      	str	r2, [r3, #4]
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <LL_DMA_EnableIT_TC>:
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LL_DMA_EnableIT_TC+0x3c>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	18d3      	adds	r3, r2, r3
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	4906      	ldr	r1, [pc, #24]	; (8001d20 <LL_DMA_EnableIT_TC+0x3c>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	18cb      	adds	r3, r1, r3
 8001d10:	2102      	movs	r1, #2
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	08003234 	.word	0x08003234

08001d24 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <LL_USART_ConfigAsyncMode+0x2c>)
 8001d4e:	401a      	ands	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	222a      	movs	r2, #42	; 0x2a
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	ffffb7ff 	.word	0xffffb7ff

08001d70 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	000a      	movs	r2, r1
 8001d96:	1cfb      	adds	r3, r7, #3
 8001d98:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001d9a:	1cfb      	adds	r3, r7, #3
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <UART1_Init>:
#include "uart.h"

void UART1_Init()
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b08f      	sub	sp, #60	; 0x3c
 8001db0:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8001db2:	2418      	movs	r4, #24
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	0018      	movs	r0, r3
 8001db8:	2320      	movs	r3, #32
 8001dba:	001a      	movs	r2, r3
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f001 f9e5 	bl	800318c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	003b      	movs	r3, r7
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	2318      	movs	r3, #24
 8001dc8:	001a      	movs	r2, r3
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f001 f9de 	bl	800318c <memset>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);//使能串口1时钟
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	01db      	lsls	r3, r3, #7
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fdb9 	bl	800194c <LL_APB2_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);//使能GPIOB时钟
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f7ff fdcc 	bl	8001978 <LL_IOP_GRP1_EnableClock>
	/**USART1 GPIO Configuration
	PB6   ------> USART1_TX
	PB7   ------> USART1_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001de0:	003b      	movs	r3, r7
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;//替换模式(外设io复用模式)
 8001de6:	003b      	movs	r3, r7
 8001de8:	2202      	movs	r2, #2
 8001dea:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;//龟速io
 8001dec:	003b      	movs	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;//推挽模式
 8001df2:	003b      	movs	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;//无内部上下拉
 8001df8:	003b      	movs	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_0;//使用AF0 IO复用设置
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);//初始化GPIO
 8001e04:	003b      	movs	r3, r7
 8001e06:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <UART1_Init+0xf4>)
 8001e08:	0019      	movs	r1, r3
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	f000 f9bb 	bl	8002186 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001e10:	003b      	movs	r3, r7
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e16:	003b      	movs	r3, r7
 8001e18:	2202      	movs	r2, #2
 8001e1a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e1c:	003b      	movs	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e22:	003b      	movs	r3, r7
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e28:	003b      	movs	r3, r7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001e2e:	003b      	movs	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	003b      	movs	r3, r7
 8001e36:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <UART1_Init+0xf4>)
 8001e38:	0019      	movs	r1, r3
 8001e3a:	0010      	movs	r0, r2
 8001e3c:	f000 f9a3 	bl	8002186 <LL_GPIO_Init>

	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;//分频器1倍
 8001e40:	0021      	movs	r1, r4
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
	USART_InitStruct.BaudRate = 2000000;//波特率
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <UART1_Init+0xf8>)
 8001e4c:	605a      	str	r2, [r3, #4]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;//数据位数
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;//1停止位
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;//无校验
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;//传输方向双向
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;//硬件控制无
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;//过采样以防干扰
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
	LL_USART_Init(USART1, &USART_InitStruct);//初始化串口
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <UART1_Init+0xfc>)
 8001e76:	0019      	movs	r1, r3
 8001e78:	0010      	movs	r0, r2
 8001e7a:	f001 f895 	bl	8002fa8 <LL_USART_Init>

	LL_USART_ConfigAsyncMode(USART1);//设置为异步模式
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <UART1_Init+0xfc>)
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <LL_USART_ConfigAsyncMode>
	LL_USART_EnableDMAReq_RX(USART1);//使能串口DMA接收
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <UART1_Init+0xfc>)
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff ff71 	bl	8001d70 <LL_USART_EnableDMAReq_RX>
	LL_USART_Enable(USART1);//使能串口
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <UART1_Init+0xfc>)
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ff47 	bl	8001d24 <LL_USART_Enable>
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b00f      	add	sp, #60	; 0x3c
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	50000400 	.word	0x50000400
 8001ea4:	001e8480 	.word	0x001e8480
 8001ea8:	40013800 	.word	0x40013800

08001eac <UART1_DMA_TXRX_Init>:

void UART1_DMA_TXRX_Init()//串口发送接收DMA初始化
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	//打开DMA时钟
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff fd35 	bl	8001920 <LL_AHB1_GRP1_EnableClock>
	//设置DMA模式
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_CIRCULAR);
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001eb8:	2220      	movs	r2, #32
 8001eba:	2102      	movs	r1, #2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fdb7 	bl	8001a30 <LL_DMA_SetMode>
	//DMA设置通道优先级
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_MEDIUM);
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	015b      	lsls	r3, r3, #5
 8001ec6:	4825      	ldr	r0, [pc, #148]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001ec8:	001a      	movs	r2, r3
 8001eca:	2102      	movs	r1, #2
 8001ecc:	f7ff fe68 	bl	8001ba0 <LL_DMA_SetChannelPriorityLevel>
	//DMA设置传输方向
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fd84 	bl	80019e4 <LL_DMA_SetDataTransferDirection>
	//DMA设置传输数据的长度（一次DMA传输的量）
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, OLED_SHOW_BUFF_BYTES_NUMBER);//512字节
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	481e      	ldr	r0, [pc, #120]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	f7ff fe81 	bl	8001bec <LL_DMA_SetDataLength>
	//DMA设置内存的地址
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&OLED_SHOW_BUFF);
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <UART1_DMA_TXRX_Init+0xb4>)
 8001eec:	481b      	ldr	r0, [pc, #108]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001eee:	001a      	movs	r2, r3
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	f7ff fe9d 	bl	8001c30 <LL_DMA_SetMemoryAddress>
	//设置内存储存单位的大小
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2102      	movs	r1, #2
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff fe29 	bl	8001b54 <LL_DMA_SetMemorySize>
	//设置内存地址增量模式
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	2102      	movs	r1, #2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff fdd9 	bl	8001ac0 <LL_DMA_SetMemoryIncMode>
	//设置外设地址
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&USART1->RDR);
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <UART1_DMA_TXRX_Init+0xb8>)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001f12:	2102      	movs	r1, #2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fea3 	bl	8001c60 <LL_DMA_SetPeriphAddress>
	//设置外设存寄存器单位大小
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2102      	movs	r1, #2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff fdf1 	bl	8001b08 <LL_DMA_SetPeriphSize>
	//设置外设地址增量模式
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_NOINCREMENT);
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fda3 	bl	8001a78 <LL_DMA_SetPeriphIncMode>
	//设置外设请求
	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART1_RX);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001f34:	2232      	movs	r2, #50	; 0x32
 8001f36:	2102      	movs	r1, #2
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff fea9 	bl	8001c90 <LL_DMA_SetPeriphRequest>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);//使能传输完成中断
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <UART1_DMA_TXRX_Init+0xb0>)
 8001f40:	2102      	movs	r1, #2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff fece 	bl	8001ce4 <LL_DMA_EnableIT_TC>

	NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	200a      	movs	r0, #10
 8001f4c:	f7ff fc7a 	bl	8001844 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001f50:	200a      	movs	r0, #10
 8001f52:	f7ff fc5d 	bl	8001810 <__NVIC_EnableIRQ>
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	2000002c 	.word	0x2000002c
 8001f64:	40013824 	.word	0x40013824

08001f68 <UART1_DMA_ReadStart>:

void UART1_DMA_ReadStart()//DMA开始自动搬运串口数据
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, OLED_SHOW_BUFF_BYTES_NUMBER);//设置数据长度
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <UART1_DMA_ReadStart+0x24>)
 8001f72:	001a      	movs	r2, r3
 8001f74:	2102      	movs	r1, #2
 8001f76:	f7ff fe39 	bl	8001bec <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_2);//开启通道
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <UART1_DMA_ReadStart+0x24>)
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff fd10 	bl	80019a4 <LL_DMA_EnableChannel>
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40020000 	.word	0x40020000

08001f90 <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler()//搬运512字节完成
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC2(DMA1);//清除中断标志
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff fe98 	bl	8001ccc <LL_DMA_ClearFlag_TC2>
	//LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);//关闭通道
	OLED_SCANALL();//把刚获取的512字节数据更新到屏幕（运行屏幕SPI DMA）
 8001f9c:	f7fe fe86 	bl	8000cac <OLED_SCANALL>
	LL_USART_TransmitData8(USART1,'F');//发送一帧成功信号
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <DMA1_Channel2_3_IRQHandler+0x24>)
 8001fa2:	2146      	movs	r1, #70	; 0x46
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff fef1 	bl	8001d8c <LL_USART_TransmitData8>
}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40013800 	.word	0x40013800

08001fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fbe:	e003      	b.n	8001fc8 <LoopCopyDataInit>

08001fc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001fc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fc6:	3104      	adds	r1, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fc8:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <LoopForever+0xa>)
  ldr r3, =_edata
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <LoopForever+0xe>)
  adds r2, r0, r1
 8001fcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fd0:	d3f6      	bcc.n	8001fc0 <CopyDataInit>
  ldr r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopForever+0x12>)
  b LoopFillZerobss
 8001fd4:	e002      	b.n	8001fdc <LoopFillZerobss>

08001fd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  str  r3, [r2]
 8001fd8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fda:	3204      	adds	r2, #4

08001fdc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <LoopForever+0x16>)
  cmp r2, r3
 8001fde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fe0:	d3f9      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fe2:	f7ff f90d 	bl	8001200 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001fe6:	f001 f8ad 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fea:	f7fe fa2b 	bl	8000444 <main>

08001fee <LoopForever>:

LoopForever:
    b LoopForever
 8001fee:	e7fe      	b.n	8001fee <LoopForever>
  ldr   r0, =_estack
 8001ff0:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8001ff4:	08003274 	.word	0x08003274
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ffc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002000:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002004:	2000022c 	.word	0x2000022c

08002008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_IRQHandler>

0800200a <LL_GPIO_SetPinMode>:
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	435a      	muls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	189b      	adds	r3, r3, r2
 8002026:	43db      	mvns	r3, r3
 8002028:	400b      	ands	r3, r1
 800202a:	001a      	movs	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	434b      	muls	r3, r1
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	434b      	muls	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}

08002044 <LL_GPIO_SetPinOutputType>:
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	43d2      	mvns	r2, r2
 8002058:	401a      	ands	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	434b      	muls	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}

0800206e <LL_GPIO_SetPinSpeed>:
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	435a      	muls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	189b      	adds	r3, r3, r2
 800208a:	43db      	mvns	r3, r3
 800208c:	400b      	ands	r3, r1
 800208e:	001a      	movs	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	434b      	muls	r3, r1
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	434b      	muls	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <LL_GPIO_SetPinPull>:
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68d9      	ldr	r1, [r3, #12]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	435a      	muls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	189b      	adds	r3, r3, r2
 80020c4:	43db      	mvns	r3, r3
 80020c6:	400b      	ands	r3, r1
 80020c8:	001a      	movs	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	434b      	muls	r3, r1
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	434b      	muls	r3, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	60da      	str	r2, [r3, #12]
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b004      	add	sp, #16
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <LL_GPIO_SetAFPin_0_7>:
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a19      	ldr	r1, [r3, #32]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	4353      	muls	r3, r2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4353      	muls	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	435a      	muls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	43db      	mvns	r3, r3
 8002108:	400b      	ands	r3, r1
 800210a:	001a      	movs	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	434b      	muls	r3, r1
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	434b      	muls	r3, r1
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	434b      	muls	r3, r1
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	434b      	muls	r3, r1
 800211e:	431a      	orrs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	621a      	str	r2, [r3, #32]
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b004      	add	sp, #16
 800212a:	bd80      	pop	{r7, pc}

0800212c <LL_GPIO_SetAFPin_8_15>:
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	0a12      	lsrs	r2, r2, #8
 8002144:	4353      	muls	r3, r2
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	0a12      	lsrs	r2, r2, #8
 800214a:	4353      	muls	r3, r2
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	0a12      	lsrs	r2, r2, #8
 8002150:	435a      	muls	r2, r3
 8002152:	0013      	movs	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	43db      	mvns	r3, r3
 800215a:	400b      	ands	r3, r1
 800215c:	001a      	movs	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	0a09      	lsrs	r1, r1, #8
 8002166:	434b      	muls	r3, r1
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	0a09      	lsrs	r1, r1, #8
 800216c:	434b      	muls	r3, r1
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	0a09      	lsrs	r1, r1, #8
 8002172:	434b      	muls	r3, r1
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	434b      	muls	r3, r1
 8002178:	431a      	orrs	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b004      	add	sp, #16
 8002184:	bd80      	pop	{r7, pc}

08002186 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002194:	e040      	b.n	8002218 <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2101      	movs	r1, #1
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4091      	lsls	r1, r2
 80021a0:	000a      	movs	r2, r1
 80021a2:	4013      	ands	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d032      	beq.n	8002212 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff ff28 	bl	800200a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d003      	beq.n	80021ca <LL_GPIO_Init+0x44>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d106      	bne.n	80021d8 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff ff4b 	bl	800206e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff ff61 	bl	80020a8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d111      	bne.n	8002212 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2bff      	cmp	r3, #255	; 0xff
 80021f2:	d807      	bhi.n	8002204 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff ff70 	bl	80020e2 <LL_GPIO_SetAFPin_0_7>
 8002202:	e006      	b.n	8002212 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ff8d 	bl	800212c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	40da      	lsrs	r2, r3
 8002220:	1e13      	subs	r3, r2, #0
 8002222:	d1b8      	bne.n	8002196 <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d003      	beq.n	8002234 <LL_GPIO_Init+0xae>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d107      	bne.n	8002244 <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f7ff ff00 	bl	8002044 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <LL_RCC_HSI_IsReady>:
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <LL_RCC_HSI_IsReady+0x24>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	401a      	ands	r2, r3
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	429a      	cmp	r2, r3
 8002264:	d101      	bne.n	800226a <LL_RCC_HSI_IsReady+0x1a>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_RCC_HSI_IsReady+0x1c>
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	40021000 	.word	0x40021000

08002278 <LL_RCC_LSE_IsReady>:
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <LL_RCC_LSE_IsReady+0x1c>)
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d101      	bne.n	800228c <LL_RCC_LSE_IsReady+0x14>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <LL_RCC_LSE_IsReady+0x16>
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <LL_RCC_GetSysClkSource>:
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <LL_RCC_GetSysClkSource+0x14>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2238      	movs	r2, #56	; 0x38
 80022a2:	4013      	ands	r3, r2
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40021000 	.word	0x40021000

080022b0 <LL_RCC_GetAHBPrescaler>:
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <LL_RCC_GetAHBPrescaler+0x14>)
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	23f0      	movs	r3, #240	; 0xf0
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	4013      	ands	r3, r2
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000

080022c8 <LL_RCC_GetAPB1Prescaler>:
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	23e0      	movs	r3, #224	; 0xe0
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	4013      	ands	r3, r2
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <LL_RCC_GetUSARTClockSource>:
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <LL_RCC_GetUSARTClockSource+0x20>)
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	4313      	orrs	r3, r2
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_PLL_GetN>:
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <LL_RCC_PLL_GetN+0x14>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	227f      	movs	r2, #127	; 0x7f
 8002310:	4013      	ands	r3, r2
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000

0800231c <LL_RCC_PLL_GetR>:
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <LL_RCC_PLL_GetR+0x14>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0f5b      	lsrs	r3, r3, #29
 8002326:	075b      	lsls	r3, r3, #29
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	40021000 	.word	0x40021000

08002334 <LL_RCC_PLL_GetMainSource>:
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <LL_RCC_PLL_GetMainSource+0x14>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2203      	movs	r2, #3
 800233e:	4013      	ands	r3, r2
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	40021000 	.word	0x40021000

0800234c <LL_RCC_PLL_GetDivider>:
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_RCC_PLL_GetDivider+0x14>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2270      	movs	r2, #112	; 0x70
 8002356:	4013      	ands	r3, r2
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	40021000 	.word	0x40021000

08002364 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800236c:	f000 f864 	bl	8002438 <RCC_GetSystemClockFreq>
 8002370:	0002      	movs	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f88a 	bl	8002494 <RCC_GetHCLKClockFreq>
 8002380:	0002      	movs	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f89a 	bl	80024c4 <RCC_GetPCLK1ClockFreq>
 8002390:	0002      	movs	r2, r0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d134      	bne.n	800241c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7ff ff93 	bl	80022e0 <LL_RCC_GetUSARTClockSource>
 80023ba:	0003      	movs	r3, r0
 80023bc:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <LL_RCC_GetUSARTClockFreq+0x88>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00a      	beq.n	80023d8 <LL_RCC_GetUSARTClockFreq+0x38>
 80023c2:	4a1a      	ldr	r2, [pc, #104]	; (800242c <LL_RCC_GetUSARTClockFreq+0x8c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00f      	beq.n	80023e8 <LL_RCC_GetUSARTClockFreq+0x48>
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <LL_RCC_GetUSARTClockFreq+0x90>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d115      	bne.n	80023fa <LL_RCC_GetUSARTClockFreq+0x5a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80023ce:	f000 f833 	bl	8002438 <RCC_GetSystemClockFreq>
 80023d2:	0003      	movs	r3, r0
 80023d4:	60fb      	str	r3, [r7, #12]
        break;
 80023d6:	e021      	b.n	800241c <LL_RCC_GetUSARTClockFreq+0x7c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80023d8:	f7ff ff3a 	bl	8002250 <LL_RCC_HSI_IsReady>
 80023dc:	0003      	movs	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d119      	bne.n	8002416 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = HSI_VALUE;
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <LL_RCC_GetUSARTClockFreq+0x94>)
 80023e4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023e6:	e016      	b.n	8002416 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80023e8:	f7ff ff46 	bl	8002278 <LL_RCC_LSE_IsReady>
 80023ec:	0003      	movs	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d113      	bne.n	800241a <LL_RCC_GetUSARTClockFreq+0x7a>
        {
          usart_frequency = LSE_VALUE;
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023f8:	e00f      	b.n	800241a <LL_RCC_GetUSARTClockFreq+0x7a>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80023fa:	f000 f81d 	bl	8002438 <RCC_GetSystemClockFreq>
 80023fe:	0003      	movs	r3, r0
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f847 	bl	8002494 <RCC_GetHCLKClockFreq>
 8002406:	0003      	movs	r3, r0
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f85b 	bl	80024c4 <RCC_GetPCLK1ClockFreq>
 800240e:	0003      	movs	r3, r0
 8002410:	60fb      	str	r3, [r7, #12]
        break;
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	e002      	b.n	800241c <LL_RCC_GetUSARTClockFreq+0x7c>
        break;
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	e000      	b.n	800241c <LL_RCC_GetUSARTClockFreq+0x7c>
        break;
 800241a:	46c0      	nop			; (mov r8, r8)
  }
#endif
  else
  {
  }
  return usart_frequency;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	00030002 	.word	0x00030002
 800242c:	00030003 	.word	0x00030003
 8002430:	00030001 	.word	0x00030001
 8002434:	00f42400 	.word	0x00f42400

08002438 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800243e:	f7ff ff2b 	bl	8002298 <LL_RCC_GetSysClkSource>
 8002442:	0003      	movs	r3, r0
 8002444:	2b08      	cmp	r3, #8
 8002446:	d002      	beq.n	800244e <RCC_GetSystemClockFreq+0x16>
 8002448:	2b10      	cmp	r3, #16
 800244a:	d003      	beq.n	8002454 <RCC_GetSystemClockFreq+0x1c>
 800244c:	e007      	b.n	800245e <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <RCC_GetSystemClockFreq+0x50>)
 8002450:	607b      	str	r3, [r7, #4]
      break;
 8002452:	e014      	b.n	800247e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002454:	f000 f84c 	bl	80024f0 <RCC_PLL_GetFreqDomain_SYS>
 8002458:	0003      	movs	r3, r0
 800245a:	607b      	str	r3, [r7, #4]
      break;
 800245c:	e00f      	b.n	800247e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <RCC_GetSystemClockFreq+0x54>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0adb      	lsrs	r3, r3, #11
 8002464:	2207      	movs	r2, #7
 8002466:	4013      	ands	r3, r2
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <RCC_GetSystemClockFreq+0x58>)
 8002474:	f7fd fe44 	bl	8000100 <__udivsi3>
 8002478:	0003      	movs	r3, r0
 800247a:	607b      	str	r3, [r7, #4]
      break;
 800247c:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800247e:	687b      	ldr	r3, [r7, #4]
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}
 8002488:	007a1200 	.word	0x007a1200
 800248c:	40021000 	.word	0x40021000
 8002490:	00f42400 	.word	0x00f42400

08002494 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800249c:	f7ff ff08 	bl	80022b0 <LL_RCC_GetAHBPrescaler>
 80024a0:	0003      	movs	r3, r0
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	220f      	movs	r2, #15
 80024a6:	401a      	ands	r2, r3
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <RCC_GetHCLKClockFreq+0x2c>)
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	58d3      	ldr	r3, [r2, r3]
 80024ae:	221f      	movs	r2, #31
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	40da      	lsrs	r2, r3
 80024b6:	0013      	movs	r3, r2
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	080031bc 	.word	0x080031bc

080024c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80024cc:	f7ff fefc 	bl	80022c8 <LL_RCC_GetAPB1Prescaler>
 80024d0:	0003      	movs	r3, r0
 80024d2:	0b1a      	lsrs	r2, r3, #12
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <RCC_GetPCLK1ClockFreq+0x28>)
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	58d3      	ldr	r3, [r2, r3]
 80024da:	221f      	movs	r2, #31
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	40da      	lsrs	r2, r3
 80024e2:	0013      	movs	r3, r2
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	080031fc 	.word	0x080031fc

080024f0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80024f6:	f7ff ff1d 	bl	8002334 <LL_RCC_PLL_GetMainSource>
 80024fa:	0003      	movs	r3, r0
 80024fc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d002      	beq.n	800250a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8002504:	2b03      	cmp	r3, #3
 8002506:	d003      	beq.n	8002510 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8002508:	e005      	b.n	8002516 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800250c:	607b      	str	r3, [r7, #4]
      break;
 800250e:	e005      	b.n	800251c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002512:	607b      	str	r3, [r7, #4]
      break;
 8002514:	e002      	b.n	800251c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002518:	607b      	str	r3, [r7, #4]
      break;
 800251a:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800251c:	f7ff fef2 	bl	8002304 <LL_RCC_PLL_GetN>
 8002520:	0002      	movs	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4353      	muls	r3, r2
 8002526:	001c      	movs	r4, r3
 8002528:	f7ff ff10 	bl	800234c <LL_RCC_PLL_GetDivider>
 800252c:	0003      	movs	r3, r0
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	3301      	adds	r3, #1
 8002532:	0019      	movs	r1, r3
 8002534:	0020      	movs	r0, r4
 8002536:	f7fd fde3 	bl	8000100 <__udivsi3>
 800253a:	0003      	movs	r3, r0
 800253c:	001c      	movs	r4, r3
 800253e:	f7ff feed 	bl	800231c <LL_RCC_PLL_GetR>
 8002542:	0003      	movs	r3, r0
 8002544:	0f5b      	lsrs	r3, r3, #29
 8002546:	3301      	adds	r3, #1
 8002548:	0019      	movs	r1, r3
 800254a:	0020      	movs	r0, r4
 800254c:	f7fd fdd8 	bl	8000100 <__udivsi3>
 8002550:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b003      	add	sp, #12
 8002558:	bd90      	pop	{r4, r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <LL_SPI_IsEnabled>:
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2240      	movs	r2, #64	; 0x40
 8002572:	4013      	ands	r3, r2
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d101      	bne.n	800257c <LL_SPI_IsEnabled+0x18>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <LL_SPI_IsEnabled+0x1a>
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}

08002586 <LL_SPI_SetCRCPolynomial>:
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	001a      	movs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	611a      	str	r2, [r3, #16]
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025ae:	230f      	movs	r3, #15
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff ffd3 	bl	8002564 <LL_SPI_IsEnabled>
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d13b      	bne.n	800263a <LL_SPI_Init+0x96>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a23      	ldr	r2, [pc, #140]	; (8002654 <LL_SPI_Init+0xb0>)
 80025c8:	401a      	ands	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4319      	orrs	r1, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4319      	orrs	r1, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	4319      	orrs	r1, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	4319      	orrs	r1, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	4319      	orrs	r1, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4319      	orrs	r1, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <LL_SPI_Init+0xb4>)
 8002604:	401a      	ands	r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	0c1b      	lsrs	r3, r3, #16
 8002610:	430b      	orrs	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0011      	movs	r1, r2
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff ffaa 	bl	8002586 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <LL_SPI_Init+0xb8>)
 8002640:	401a      	ands	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002646:	230f      	movs	r3, #15
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	781b      	ldrb	r3, [r3, #0]
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}
 8002654:	ffff0040 	.word	0xffff0040
 8002658:	fffff0fb 	.word	0xfffff0fb
 800265c:	fffff7ff 	.word	0xfffff7ff

08002660 <LL_TIM_SetPrescaler>:
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}

08002678 <LL_TIM_SetAutoReload>:
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <LL_TIM_SetRepetitionCounter>:
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <LL_TIM_OC_SetCompareCH1>:
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <LL_TIM_OC_SetCompareCH2>:
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <LL_TIM_OC_SetCompareCH3>:
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <LL_TIM_OC_SetCompareCH4>:
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <LL_TIM_OC_SetCompareCH5>:
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <LL_TIM_OC_SetCompareCH6>:
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}

0800273c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	2201      	movs	r2, #1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	615a      	str	r2, [r3, #20]
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a2c      	ldr	r2, [pc, #176]	; (800281c <LL_TIM_Init+0xc4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <LL_TIM_Init+0x20>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <LL_TIM_Init+0xc8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d107      	bne.n	8002788 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2270      	movs	r2, #112	; 0x70
 800277c:	4393      	bics	r3, r2
 800277e:	001a      	movs	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a24      	ldr	r2, [pc, #144]	; (800281c <LL_TIM_Init+0xc4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00f      	beq.n	80027b0 <LL_TIM_Init+0x58>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a23      	ldr	r2, [pc, #140]	; (8002820 <LL_TIM_Init+0xc8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00b      	beq.n	80027b0 <LL_TIM_Init+0x58>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a22      	ldr	r2, [pc, #136]	; (8002824 <LL_TIM_Init+0xcc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d007      	beq.n	80027b0 <LL_TIM_Init+0x58>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a21      	ldr	r2, [pc, #132]	; (8002828 <LL_TIM_Init+0xd0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <LL_TIM_Init+0x58>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <LL_TIM_Init+0xd4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d106      	bne.n	80027be <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <LL_TIM_Init+0xd8>)
 80027b4:	401a      	ands	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff ff53 	bl	8002678 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	001a      	movs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0011      	movs	r1, r2
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff ff3f 	bl	8002660 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <LL_TIM_Init+0xc4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <LL_TIM_Init+0xa2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <LL_TIM_Init+0xd0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d003      	beq.n	80027fa <LL_TIM_Init+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <LL_TIM_Init+0xd4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d107      	bne.n	800280a <LL_TIM_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7c1b      	ldrb	r3, [r3, #16]
 80027fe:	001a      	movs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f7ff ff43 	bl	8002690 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff ff95 	bl	800273c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b004      	add	sp, #16
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400
 8002824:	40002000 	.word	0x40002000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800
 8002830:	fffffcff 	.word	0xfffffcff

08002834 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002840:	2317      	movs	r3, #23
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0052      	lsls	r2, r2, #1
 800284e:	4293      	cmp	r3, r2
 8002850:	d02b      	beq.n	80028aa <LL_TIM_OC_Init+0x76>
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	0052      	lsls	r2, r2, #1
 8002856:	4293      	cmp	r3, r2
 8002858:	d804      	bhi.n	8002864 <LL_TIM_OC_Init+0x30>
 800285a:	2b01      	cmp	r3, #1
 800285c:	d00f      	beq.n	800287e <LL_TIM_OC_Init+0x4a>
 800285e:	2b10      	cmp	r3, #16
 8002860:	d018      	beq.n	8002894 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002862:	e04e      	b.n	8002902 <LL_TIM_OC_Init+0xce>
  switch (Channel)
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	0252      	lsls	r2, r2, #9
 8002868:	4293      	cmp	r3, r2
 800286a:	d034      	beq.n	80028d6 <LL_TIM_OC_Init+0xa2>
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	0352      	lsls	r2, r2, #13
 8002870:	4293      	cmp	r3, r2
 8002872:	d03b      	beq.n	80028ec <LL_TIM_OC_Init+0xb8>
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	0152      	lsls	r2, r2, #5
 8002878:	4293      	cmp	r3, r2
 800287a:	d021      	beq.n	80028c0 <LL_TIM_OC_Init+0x8c>
      break;
 800287c:	e041      	b.n	8002902 <LL_TIM_OC_Init+0xce>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800287e:	2317      	movs	r3, #23
 8002880:	18fc      	adds	r4, r7, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f841 	bl	8002910 <OC1Config>
 800288e:	0003      	movs	r3, r0
 8002890:	7023      	strb	r3, [r4, #0]
      break;
 8002892:	e036      	b.n	8002902 <LL_TIM_OC_Init+0xce>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002894:	2317      	movs	r3, #23
 8002896:	18fc      	adds	r4, r7, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0011      	movs	r1, r2
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f8b4 	bl	8002a0c <OC2Config>
 80028a4:	0003      	movs	r3, r0
 80028a6:	7023      	strb	r3, [r4, #0]
      break;
 80028a8:	e02b      	b.n	8002902 <LL_TIM_OC_Init+0xce>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80028aa:	2317      	movs	r3, #23
 80028ac:	18fc      	adds	r4, r7, r3
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 f92d 	bl	8002b14 <OC3Config>
 80028ba:	0003      	movs	r3, r0
 80028bc:	7023      	strb	r3, [r4, #0]
      break;
 80028be:	e020      	b.n	8002902 <LL_TIM_OC_Init+0xce>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80028c0:	2317      	movs	r3, #23
 80028c2:	18fc      	adds	r4, r7, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0011      	movs	r1, r2
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f9a6 	bl	8002c1c <OC4Config>
 80028d0:	0003      	movs	r3, r0
 80028d2:	7023      	strb	r3, [r4, #0]
      break;
 80028d4:	e015      	b.n	8002902 <LL_TIM_OC_Init+0xce>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80028d6:	2317      	movs	r3, #23
 80028d8:	18fc      	adds	r4, r7, r3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fa05 	bl	8002cf0 <OC5Config>
 80028e6:	0003      	movs	r3, r0
 80028e8:	7023      	strb	r3, [r4, #0]
      break;
 80028ea:	e00a      	b.n	8002902 <LL_TIM_OC_Init+0xce>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80028ec:	2317      	movs	r3, #23
 80028ee:	18fc      	adds	r4, r7, r3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fa56 	bl	8002da8 <OC6Config>
 80028fc:	0003      	movs	r3, r0
 80028fe:	7023      	strb	r3, [r4, #0]
      break;
 8002900:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002902:	2317      	movs	r3, #23
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b007      	add	sp, #28
 800290e:	bd90      	pop	{r4, r7, pc}

08002910 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2201      	movs	r2, #1
 8002920:	4393      	bics	r3, r2
 8002922:	001a      	movs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2203      	movs	r2, #3
 800293e:	4393      	bics	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <OC1Config+0xe4>)
 8002946:	401a      	ands	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2202      	movs	r2, #2
 8002954:	4393      	bics	r3, r2
 8002956:	001a      	movs	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2201      	movs	r2, #1
 8002964:	4393      	bics	r3, r2
 8002966:	001a      	movs	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <OC1Config+0xe8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <OC1Config+0x78>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a20      	ldr	r2, [pc, #128]	; (80029fc <OC1Config+0xec>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <OC1Config+0x78>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <OC1Config+0xf0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d120      	bne.n	80029ca <OC1Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2208      	movs	r2, #8
 800298c:	4393      	bics	r3, r2
 800298e:	001a      	movs	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2204      	movs	r2, #4
 800299e:	4393      	bics	r3, r2
 80029a0:	001a      	movs	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <OC1Config+0xf4>)
 80029b0:	401a      	ands	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <OC1Config+0xf8>)
 80029be:	401a      	ands	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f7ff fe62 	bl	80026a8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b006      	add	sp, #24
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	fffeff8f 	.word	0xfffeff8f
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40014400 	.word	0x40014400
 8002a00:	40014800 	.word	0x40014800
 8002a04:	fffffeff 	.word	0xfffffeff
 8002a08:	fffffdff 	.word	0xfffffdff

08002a0c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	001a      	movs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <OC2Config+0xec>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	; (8002afc <OC2Config+0xf0>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2220      	movs	r2, #32
 8002a52:	4393      	bics	r3, r2
 8002a54:	001a      	movs	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2210      	movs	r2, #16
 8002a64:	4393      	bics	r3, r2
 8002a66:	001a      	movs	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <OC2Config+0xf4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <OC2Config+0x7e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <OC2Config+0xf8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d003      	beq.n	8002a8a <OC2Config+0x7e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <OC2Config+0xfc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d121      	bne.n	8002ace <OC2Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4393      	bics	r3, r2
 8002a90:	001a      	movs	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	019b      	lsls	r3, r3, #6
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <OC2Config+0x100>)
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <OC2Config+0x104>)
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7ff fdec 	bl	80026c0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b006      	add	sp, #24
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fffffcff 	.word	0xfffffcff
 8002afc:	feff8fff 	.word	0xfeff8fff
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40014400 	.word	0x40014400
 8002b08:	40014800 	.word	0x40014800
 8002b0c:	fffffbff 	.word	0xfffffbff
 8002b10:	fffff7ff 	.word	0xfffff7ff

08002b14 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a34      	ldr	r2, [pc, #208]	; (8002bf4 <OC3Config+0xe0>)
 8002b24:	401a      	ands	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4393      	bics	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <OC3Config+0xe4>)
 8002b48:	401a      	ands	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <OC3Config+0xe8>)
 8002b56:	401a      	ands	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <OC3Config+0xe0>)
 8002b66:	401a      	ands	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <OC3Config+0xec>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <OC3Config+0x76>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <OC3Config+0xf0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <OC3Config+0x76>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <OC3Config+0xf4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d11f      	bne.n	8002bca <OC3Config+0xb6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <OC3Config+0xf8>)
 8002b8e:	401a      	ands	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <OC3Config+0xfc>)
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	029b      	lsls	r3, r3, #10
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <OC3Config+0x100>)
 8002bae:	401a      	ands	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <OC3Config+0x104>)
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	015b      	lsls	r3, r3, #5
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0011      	movs	r1, r2
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff fd7a 	bl	80026d8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b006      	add	sp, #24
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	fffffeff 	.word	0xfffffeff
 8002bf8:	fffeff8f 	.word	0xfffeff8f
 8002bfc:	fffffdff 	.word	0xfffffdff
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800
 8002c0c:	fffff7ff 	.word	0xfffff7ff
 8002c10:	fffffbff 	.word	0xfffffbff
 8002c14:	ffffefff 	.word	0xffffefff
 8002c18:	ffffdfff 	.word	0xffffdfff

08002c1c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <OC4Config+0xb4>)
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <OC4Config+0xb8>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <OC4Config+0xbc>)
 8002c50:	401a      	ands	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <OC4Config+0xc0>)
 8002c60:	401a      	ands	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <OC4Config+0xb4>)
 8002c70:	401a      	ands	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	031b      	lsls	r3, r3, #12
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <OC4Config+0xc4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <OC4Config+0x78>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <OC4Config+0xc8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d003      	beq.n	8002c94 <OC4Config+0x78>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <OC4Config+0xcc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d107      	bne.n	8002ca4 <OC4Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <OC4Config+0xd0>)
 8002c98:	401a      	ands	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	019b      	lsls	r3, r3, #6
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff fd19 	bl	80026f0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b006      	add	sp, #24
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	ffffefff 	.word	0xffffefff
 8002cd4:	fffffcff 	.word	0xfffffcff
 8002cd8:	feff8fff 	.word	0xfeff8fff
 8002cdc:	ffffdfff 	.word	0xffffdfff
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40014400 	.word	0x40014400
 8002ce8:	40014800 	.word	0x40014800
 8002cec:	ffffbfff 	.word	0xffffbfff

08002cf0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <OC5Config+0xa0>)
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <OC5Config+0xa4>)
 8002d16:	401a      	ands	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <OC5Config+0xa8>)
 8002d24:	401a      	ands	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <OC5Config+0xa0>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <OC5Config+0xac>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <OC5Config+0x68>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <OC5Config+0xb0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <OC5Config+0x68>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <OC5Config+0xb4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d109      	bne.n	8002d6c <OC5Config+0x7c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <OC5Config+0xa0>)
 8002d5e:	401a      	ands	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0011      	movs	r1, r2
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff fcc4 	bl	8002708 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fffeffff 	.word	0xfffeffff
 8002d94:	fffeff8f 	.word	0xfffeff8f
 8002d98:	fffdffff 	.word	0xfffdffff
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40014400 	.word	0x40014400
 8002da4:	40014800 	.word	0x40014800

08002da8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <OC6Config+0xa4>)
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <OC6Config+0xa8>)
 8002dce:	401a      	ands	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <OC6Config+0xac>)
 8002dde:	401a      	ands	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	051b      	lsls	r3, r3, #20
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <OC6Config+0xa4>)
 8002dee:	401a      	ands	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	051b      	lsls	r3, r3, #20
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <OC6Config+0xb0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <OC6Config+0x6a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <OC6Config+0xb4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <OC6Config+0x6a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <OC6Config+0xb8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d109      	bne.n	8002e26 <OC6Config+0x7e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <OC6Config+0xbc>)
 8002e18:	401a      	ands	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0011      	movs	r1, r2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff fc75 	bl	8002724 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	ffefffff 	.word	0xffefffff
 8002e50:	feff8fff 	.word	0xfeff8fff
 8002e54:	ffdfffff 	.word	0xffdfffff
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	fffbffff 	.word	0xfffbffff

08002e68 <LL_USART_IsEnabled>:
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_USART_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_USART_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <LL_USART_SetPrescaler>:
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	220f      	movs	r2, #15
 8002e9a:	4393      	bics	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <LL_USART_SetStopBitsLength>:
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <LL_USART_SetStopBitsLength+0x24>)
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	605a      	str	r2, [r3, #4]
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	ffffcfff 	.word	0xffffcfff

08002ed8 <LL_USART_SetHWFlowCtrl>:
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <LL_USART_SetHWFlowCtrl+0x24>)
 8002ee8:	401a      	ands	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	fffffcff 	.word	0xfffffcff

08002f00 <LL_USART_SetBaudRate>:
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0b      	cmp	r3, #11
 8002f12:	d840      	bhi.n	8002f96 <LL_USART_SetBaudRate+0x96>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d123      	bne.n	8002f66 <LL_USART_SetBaudRate+0x66>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	001a      	movs	r2, r3
 8002f24:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <LL_USART_SetBaudRate+0xa0>)
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	58d3      	ldr	r3, [r2, r3]
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	68b8      	ldr	r0, [r7, #8]
 8002f2e:	f7fd f8e7 	bl	8000100 <__udivsi3>
 8002f32:	0003      	movs	r3, r0
 8002f34:	005a      	lsls	r2, r3, #1
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	18d3      	adds	r3, r2, r3
 8002f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fd f8de 	bl	8000100 <__udivsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <LL_USART_SetBaudRate+0xa4>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	60dc      	str	r4, [r3, #12]
}
 8002f64:	e017      	b.n	8002f96 <LL_USART_SetBaudRate+0x96>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <LL_USART_SetBaudRate+0xa0>)
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	58d3      	ldr	r3, [r2, r3]
 8002f72:	0019      	movs	r1, r3
 8002f74:	68b8      	ldr	r0, [r7, #8]
 8002f76:	f7fd f8c3 	bl	8000100 <__udivsi3>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	18d3      	adds	r3, r2, r3
 8002f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fd f8ba 	bl	8000100 <__udivsi3>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	001a      	movs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	60da      	str	r2, [r3, #12]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b007      	add	sp, #28
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	0800323c 	.word	0x0800323c
 8002fa4:	0000fff0 	.word	0x0000fff0

08002fa8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b08b      	sub	sp, #44	; 0x2c
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002fb2:	231f      	movs	r3, #31
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff ff51 	bl	8002e68 <LL_USART_IsEnabled>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d153      	bne.n	8003072 <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2c      	ldr	r2, [pc, #176]	; (8003080 <LL_USART_Init+0xd8>)
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	4319      	orrs	r1, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4319      	orrs	r1, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0011      	movs	r1, r2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff ff5a 	bl	8002eb0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ff67 	bl	8002ed8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LL_USART_Init+0xdc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d105      	bne.n	800301e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003012:	2003      	movs	r0, #3
 8003014:	f7ff f9c4 	bl	80023a0 <LL_RCC_GetUSARTClockFreq>
 8003018:	0003      	movs	r3, r0
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e00b      	b.n	8003036 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <LL_USART_Init+0xe0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d107      	bne.n	8003036 <LL_USART_Init+0x8e>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003026:	240c      	movs	r4, #12
 8003028:	193b      	adds	r3, r7, r4
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff f99a 	bl	8002364 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003044:	231f      	movs	r3, #31
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	69dc      	ldr	r4, [r3, #28]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	0023      	movs	r3, r4
 8003060:	f7ff ff4e 	bl	8002f00 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ff0c 	bl	8002e8a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003072:	231f      	movs	r3, #31
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b009      	add	sp, #36	; 0x24
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	efff69f3 	.word	0xefff69f3
 8003084:	40013800 	.word	0x40013800
 8003088:	40004400 	.word	0x40004400

0800308c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003096:	6839      	ldr	r1, [r7, #0]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd f831 	bl	8000100 <__udivsi3>
 800309e:	0003      	movs	r3, r0
 80030a0:	001a      	movs	r2, r3
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <LL_InitTick+0x30>)
 80030a4:	3a01      	subs	r2, #1
 80030a6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <LL_InitTick+0x30>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b03      	ldr	r3, [pc, #12]	; (80030bc <LL_InitTick+0x30>)
 80030b0:	2205      	movs	r2, #5
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80030c8:	23fa      	movs	r3, #250	; 0xfa
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ffdb 	bl	800308c <LL_InitTick>
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <LL_mDelay+0x44>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80030ee:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	d00c      	beq.n	8003114 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8003100:	e008      	b.n	8003114 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <LL_mDelay+0x44>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	025b      	lsls	r3, r3, #9
 800310a:	4013      	ands	r3, r2
 800310c:	d002      	beq.n	8003114 <LL_mDelay+0x34>
    {
      tmpDelay --;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f3      	bne.n	8003102 <LL_mDelay+0x22>
    }
  }
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	e000e010 	.word	0xe000e010

08003128 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <LL_SetSystemCoreClock+0x18>)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	20000004 	.word	0x20000004

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	2600      	movs	r6, #0
 8003148:	4d0c      	ldr	r5, [pc, #48]	; (800317c <__libc_init_array+0x38>)
 800314a:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314c:	1b64      	subs	r4, r4, r5
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	2600      	movs	r6, #0
 8003156:	f000 f821 	bl	800319c <_init>
 800315a:	4d0a      	ldr	r5, [pc, #40]	; (8003184 <__libc_init_array+0x40>)
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <__libc_init_array+0x44>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	00b3      	lsls	r3, r6, #2
 800316a:	58eb      	ldr	r3, [r5, r3]
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	00b3      	lsls	r3, r6, #2
 8003174:	58eb      	ldr	r3, [r5, r3]
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	0800326c 	.word	0x0800326c
 8003180:	0800326c 	.word	0x0800326c
 8003184:	0800326c 	.word	0x0800326c
 8003188:	08003270 	.word	0x08003270

0800318c <memset>:
 800318c:	0003      	movs	r3, r0
 800318e:	1812      	adds	r2, r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	7019      	strb	r1, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
