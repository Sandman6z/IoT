
MX_G030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b5c  08002b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b5c  08002b5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b5c  08002b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002b70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b70  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093e9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c18  00000000  00000000  0002941d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002b038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002ba78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000150a1  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f05  00000000  00000000  00041461  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080950  00000000  00000000  0004a366  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cacb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  000cad34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002b14 	.word	0x08002b14

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002b14 	.word	0x08002b14

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_RCC_HSI_Enable+0x18>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <LL_RCC_HSI_Enable+0x18>)
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	0049      	lsls	r1, r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <LL_RCC_HSI_IsReady+0x24>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	401a      	ands	r2, r3
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	429a      	cmp	r2, r3
 800041c:	d101      	bne.n	8000422 <LL_RCC_HSI_IsReady+0x1a>
 800041e:	2301      	movs	r3, #1
 8000420:	e000      	b.n	8000424 <LL_RCC_HSI_IsReady+0x1c>
 8000422:	2300      	movs	r3, #0
}
 8000424:	0018      	movs	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <LL_RCC_SetSysClkSource+0x24>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	2207      	movs	r2, #7
 800043e:	4393      	bics	r3, r2
 8000440:	0019      	movs	r1, r3
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <LL_RCC_SetSysClkSource+0x24>)
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	430a      	orrs	r2, r1
 8000448:	609a      	str	r2, [r3, #8]
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	40021000 	.word	0x40021000

08000458 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <LL_RCC_GetSysClkSource+0x14>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2238      	movs	r2, #56	; 0x38
 8000462:	4013      	ands	r3, r2
}
 8000464:	0018      	movs	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <LL_RCC_SetAHBPrescaler+0x24>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <LL_RCC_SetAHBPrescaler+0x28>)
 800047e:	4013      	ands	r3, r2
 8000480:	0019      	movs	r1, r3
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <LL_RCC_SetAHBPrescaler+0x24>)
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	430a      	orrs	r2, r1
 8000488:	609a      	str	r2, [r3, #8]
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40021000 	.word	0x40021000
 8000498:	fffff0ff 	.word	0xfffff0ff

0800049c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004aa:	4013      	ands	r3, r2
 80004ac:	0019      	movs	r1, r3
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	430a      	orrs	r2, r1
 80004b4:	609a      	str	r2, [r3, #8]
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000
 80004c4:	ffff8fff 	.word	0xffff8fff

080004c8 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <LL_RCC_SetUSARTClockSource+0x2c>)
 80004d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	0c12      	lsrs	r2, r2, #16
 80004d8:	43d2      	mvns	r2, r2
 80004da:	401a      	ands	r2, r3
 80004dc:	0011      	movs	r1, r2
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	041b      	lsls	r3, r3, #16
 80004e2:	0c1a      	lsrs	r2, r3, #16
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <LL_RCC_SetUSARTClockSource+0x2c>)
 80004e6:	430a      	orrs	r2, r1
 80004e8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <LL_RCC_PLL_Enable+0x18>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <LL_RCC_PLL_Enable+0x18>)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0449      	lsls	r1, r1, #17
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LL_RCC_PLL_IsReady+0x24>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	049b      	lsls	r3, r3, #18
 8000520:	401a      	ands	r2, r3
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	049b      	lsls	r3, r3, #18
 8000526:	429a      	cmp	r2, r3
 8000528:	d101      	bne.n	800052e <LL_RCC_PLL_IsReady+0x1a>
 800052a:	2301      	movs	r3, #1
 800052c:	e000      	b.n	8000530 <LL_RCC_PLL_IsReady+0x1c>
 800052e:	2300      	movs	r3, #0
}
 8000530:	0018      	movs	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000550:	4013      	ands	r3, r2
 8000552:	0019      	movs	r1, r3
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	021b      	lsls	r3, r3, #8
 800055e:	431a      	orrs	r2, r3
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	431a      	orrs	r2, r3
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000566:	430a      	orrs	r2, r1
 8000568:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b004      	add	sp, #16
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000
 8000578:	1fff808c 	.word	0x1fff808c

0800057c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	0549      	lsls	r1, r1, #21
 800058a:	430a      	orrs	r2, r1
 800058c:	60da      	str	r2, [r3, #12]
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <LL_I2C_EnableClockStretching+0x1c>)
 80005a6:	401a      	ands	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	fffdffff 	.word	0xfffdffff

080005b8 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <LL_I2C_DisableGeneralCall+0x1c>)
 80005c6:	401a      	ands	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	fff7ffff 	.word	0xfff7ffff

080005d8 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <LL_I2C_SetOwnAddress2+0x28>)
 80005ea:	401a      	ands	r2, r3
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	430b      	orrs	r3, r1
 80005f2:	431a      	orrs	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	60da      	str	r2, [r3, #12]
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	fffff801 	.word	0xfffff801

08000604 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000612:	401a      	ands	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}
 8000620:	ffff7fff 	.word	0xffff7fff

08000624 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	0492      	lsls	r2, r2, #18
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	605a      	str	r2, [r3, #4]
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <LL_APB1_GRP1_EnableClock+0x28>)
 800064e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <LL_APB1_GRP1_EnableClock+0x28>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	430a      	orrs	r2, r1
 8000656:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <LL_APB1_GRP1_EnableClock+0x28>)
 800065a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b004      	add	sp, #16
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000

08000670 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <LL_APB2_GRP1_EnableClock+0x28>)
 800067a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <LL_APB2_GRP1_EnableClock+0x28>)
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	430a      	orrs	r2, r1
 8000682:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <LL_APB2_GRP1_EnableClock+0x28>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4013      	ands	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b004      	add	sp, #16
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80006a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	430a      	orrs	r2, r1
 80006ae:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80006b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ba:	68fb      	ldr	r3, [r7, #12]
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <LL_FLASH_SetLatency+0x24>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2207      	movs	r2, #7
 80006d6:	4393      	bics	r3, r2
 80006d8:	0019      	movs	r1, r3
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <LL_FLASH_SetLatency+0x24>)
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40022000 	.word	0x40022000

080006f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <LL_FLASH_GetLatency+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2207      	movs	r2, #7
 80006fa:	4013      	ands	r3, r2
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40022000 	.word	0x40022000

08000708 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2210      	movs	r2, #16
 8000718:	4393      	bics	r3, r2
 800071a:	001a      	movs	r2, r3
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	431a      	orrs	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	605a      	str	r2, [r3, #4]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2208      	movs	r2, #8
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	605a      	str	r2, [r3, #4]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fb14 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f80c 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f9cc 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000758:	f000 f9ac 	bl	8000ab4 <MX_DMA_Init>
  MX_I2C2_Init();
 800075c:	f000 f850 	bl	8000800 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000760:	f000 f8d6 	bl	8000910 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000764:	f000 f958 	bl	8000a18 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x20>
	...

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff ffa9 	bl	80006c8 <LL_FLASH_SetLatency>
  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000776:	f7ff ffbb 	bl	80006f0 <LL_FLASH_GetLatency>
 800077a:	0003      	movs	r3, r0
 800077c:	2b02      	cmp	r3, #2
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x18>
  {
    Error_Handler();  
 8000780:	f000 f9fc 	bl	8000b7c <Error_Handler>
  };

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000784:	f7ff fe32 	bl	80003ec <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	f7ff fe3d 	bl	8000408 <LL_RCC_HSI_IsReady>
 800078e:	0003      	movs	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d1fa      	bne.n	800078a <SystemClock_Config+0x1e>
  {
  };

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	059b      	lsls	r3, r3, #22
 8000798:	2208      	movs	r2, #8
 800079a:	2100      	movs	r1, #0
 800079c:	2002      	movs	r0, #2
 800079e:	f7ff fecd 	bl	800053c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80007a2:	f7ff fea9 	bl	80004f8 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 80007a6:	f7ff fee9 	bl	800057c <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	f7ff feb2 	bl	8000514 <LL_RCC_PLL_IsReady>
 80007b0:	0003      	movs	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d1fa      	bne.n	80007ac <SystemClock_Config+0x40>
  {
  };

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fe5a 	bl	8000470 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff fe37 	bl	8000430 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	f7ff fe48 	bl	8000458 <LL_RCC_GetSysClkSource>
 80007c8:	0003      	movs	r3, r0
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d1fa      	bne.n	80007c4 <SystemClock_Config+0x58>
  {
  };

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fe64 	bl	800049c <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <SystemClock_Config+0x90>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 f962 	bl	8002aa0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 faeb 	bl	8000db8 <HAL_InitTick>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x7e>
  {
    Error_Handler();  
 80007e6:	f000 f9c9 	bl	8000b7c <Error_Handler>
  };
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80007ea:	23c0      	movs	r3, #192	; 0xc0
 80007ec:	029b      	lsls	r3, r3, #10
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fe6a 	bl	80004c8 <LL_RCC_SetUSARTClockSource>
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	03d09000 	.word	0x03d09000

08000800 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08f      	sub	sp, #60	; 0x3c
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000806:	241c      	movs	r4, #28
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	231c      	movs	r3, #28
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 f977 	bl	8002b04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	0018      	movs	r0, r3
 800081a:	2318      	movs	r3, #24
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f002 f970 	bl	8002b04 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff39 	bl	800069c <LL_IOP_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2202      	movs	r2, #2
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2201      	movs	r2, #1
 8000848:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2206      	movs	r2, #6
 800084e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <MX_I2C2_Init+0x104>)
 8000854:	0019      	movs	r1, r3
 8000856:	0010      	movs	r0, r2
 8000858:	f001 ff60 	bl	800271c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2202      	movs	r2, #2
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2201      	movs	r2, #1
 8000874:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2201      	movs	r2, #1
 800087a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2206      	movs	r2, #6
 8000880:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <MX_I2C2_Init+0x104>)
 8000886:	0019      	movs	r1, r3
 8000888:	0010      	movs	r0, r2
 800088a:	f001 ff47 	bl	800271c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	03db      	lsls	r3, r3, #15
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fed6 	bl	8000644 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization 
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000898:	0021      	movs	r1, r4
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x10707DBC;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_I2C2_Init+0x108>)
 80008a4:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <MX_I2C2_Init+0x10c>)
 80008c8:	0019      	movs	r1, r3
 80008ca:	0010      	movs	r0, r2
 80008cc:	f002 f828 	bl	8002920 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_I2C2_Init+0x10c>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_I2C2_Init+0x10c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff fe7a 	bl	80005d8 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_I2C2_Init+0x10c>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fe8c 	bl	8000604 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_I2C2_Init+0x10c>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fe62 	bl	80005b8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <MX_I2C2_Init+0x10c>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff fe4e 	bl	8000598 <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00f      	add	sp, #60	; 0x3c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	50000400 	.word	0x50000400
 8000908:	10707dbc 	.word	0x10707dbc
 800090c:	40005800 	.word	0x40005800

08000910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b091      	sub	sp, #68	; 0x44
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000916:	2418      	movs	r4, #24
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	2328      	movs	r3, #40	; 0x28
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f002 f8ef 	bl	8002b04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	003b      	movs	r3, r7
 8000928:	0018      	movs	r0, r3
 800092a:	2318      	movs	r3, #24
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 f8e8 	bl	8002b04 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	015b      	lsls	r3, r3, #5
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fe99 	bl	8000670 <LL_APB2_GRP1_EnableClock>
  
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff feac 	bl	800069c <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA1   ------> SPI1_SCK
  PA12 [PA10]   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000944:	003b      	movs	r3, r7
 8000946:	2202      	movs	r2, #2
 8000948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800094a:	003b      	movs	r3, r7
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000950:	003b      	movs	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000956:	003b      	movs	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800095c:	003b      	movs	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000962:	003b      	movs	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	003a      	movs	r2, r7
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fed3 	bl	800271c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000976:	003b      	movs	r3, r7
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0152      	lsls	r2, r2, #5
 800097c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800097e:	003b      	movs	r3, r7
 8000980:	2202      	movs	r2, #2
 8000982:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000984:	003b      	movs	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800098a:	003b      	movs	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	003b      	movs	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000996:	003b      	movs	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	003a      	movs	r2, r7
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 feb9 	bl	800271c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2282      	movs	r2, #130	; 0x82
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	22e0      	movs	r2, #224	; 0xe0
 80009be:	00d2      	lsls	r2, r2, #3
 80009c0:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2207      	movs	r2, #7
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <MX_SPI1_Init+0x104>)
 80009f2:	0019      	movs	r1, r3
 80009f4:	0010      	movs	r0, r2
 80009f6:	f001 fff5 	bl	80029e4 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI1_Init+0x104>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fe82 	bl	8000708 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <MX_SPI1_Init+0x104>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fe90 	bl	800072c <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b011      	add	sp, #68	; 0x44
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40013000 	.word	0x40013000

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <MX_USART1_UART_Init+0x98>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a24:	22e1      	movs	r2, #225	; 0xe1
 8000a26:	0252      	lsls	r2, r2, #9
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fe88 	bl	8001778 <HAL_UART_Init>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 f886 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a72:	2100      	movs	r1, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fca7 	bl	80023c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 f87d 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 fcde 	bl	8002448 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 f874 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 fc5c 	bl	8002354 <HAL_UARTEx_DisableFifoMode>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f86c 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000084 	.word	0x20000084
 8000ab0:	40013800 	.word	0x40013800

08000ab4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_DMA_Init+0x38>)
 8000abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_DMA_Init+0x38>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_DMA_Init+0x38>)
 8000ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 fa7e 	bl	8000fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000adc:	200a      	movs	r0, #10
 8000ade:	f000 fa90 	bl	8001002 <HAL_NVIC_EnableIRQ>

}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40021000 	.word	0x40021000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	003b      	movs	r3, r7
 8000af8:	0018      	movs	r0, r3
 8000afa:	2318      	movs	r3, #24
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f002 f800 	bl	8002b04 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fdc9 	bl	800069c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f7ff fdc6 	bl	800069c <LL_IOP_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2204      	movs	r2, #4
 8000b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2202      	movs	r2, #2
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2201      	movs	r2, #1
 8000b32:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	003a      	movs	r2, r7
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 fded 	bl	800271c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2201      	movs	r2, #1
 8000b64:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	003a      	movs	r2, r7
 8000b68:	23a0      	movs	r3, #160	; 0xa0
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 fdd4 	bl	800271c <LL_GPIO_Init>

}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b006      	add	sp, #24
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0549      	lsls	r1, r1, #21
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	055b      	lsls	r3, r3, #21
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	2314      	movs	r3, #20
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2314      	movs	r3, #20
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f001 ff8e 	bl	8002b04 <memset>
  if(huart->Instance==USART1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <HAL_UART_MspInit+0xe0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d15a      	bne.n	8000ca8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf2:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <HAL_UART_MspInit+0xe4>)
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_UART_MspInit+0xe4>)
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	01c9      	lsls	r1, r1, #7
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_UART_MspInit+0xe4>)
 8000c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	01db      	lsls	r3, r3, #7
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <HAL_UART_MspInit+0xe4>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <HAL_UART_MspInit+0xe4>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_UART_MspInit+0xe4>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c26:	2114      	movs	r1, #20
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	22c0      	movs	r2, #192	; 0xc0
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2202      	movs	r2, #2
 8000c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2201      	movs	r2, #1
 8000c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	187a      	adds	r2, r7, r1
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fb7f 	bl	8001354 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0xec>)
 8000c5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c5e:	2233      	movs	r2, #51	; 0x33
 8000c60:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f9d4 	bl	800103c <HAL_DMA_Init>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c98:	f7ff ff70 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000ca0:	675a      	str	r2, [r3, #116]	; 0x74
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_UART_MspInit+0xe8>)
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b00a      	add	sp, #40	; 0x28
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40013800 	.word	0x40013800
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	20000028 	.word	0x20000028
 8000cbc:	40020030 	.word	0x40020030

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8b0 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fa28 	bl	8001150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000028 	.word	0x20000028

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <SystemInit+0x14>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	0512      	lsls	r2, r2, #20
 8000d16:	609a      	str	r2, [r3, #8]
#endif
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d2a:	e003      	b.n	8000d34 <LoopCopyDataInit>

08000d2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d32:	3104      	adds	r1, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopForever+0xe>)
  adds r2, r0, r1
 8000d38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d3c:	d3f6      	bcc.n	8000d2c <CopyDataInit>
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopForever+0x12>)
  b LoopFillZerobss
 8000d40:	e002      	b.n	8000d48 <LoopFillZerobss>

08000d42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d46:	3204      	adds	r2, #4

08000d48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <LoopForever+0x16>)
  cmp r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d4c:	d3f9      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d4e:	f7ff ffdd 	bl	8000d0c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d52:	f001 feb3 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fcf7 	bl	8000748 <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   r0, =_estack
 8000d5c:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000d60:	08002b64 	.word	0x08002b64
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d68:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d70:	20000114 	.word	0x20000114

08000d74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x3c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Init+0x3c>)
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	0049      	lsls	r1, r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f810 	bl	8000db8 <HAL_InitTick>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e001      	b.n	8000da8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fef0 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	781b      	ldrb	r3, [r3, #0]
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b002      	add	sp, #8
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_InitTick+0x88>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d02b      	beq.n	8000e28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_InitTick+0x8c>)
 8000dd2:	681c      	ldr	r4, [r3, #0]
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_InitTick+0x88>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	0019      	movs	r1, r3
 8000dda:	23fa      	movs	r3, #250	; 0xfa
 8000ddc:	0098      	lsls	r0, r3, #2
 8000dde:	f7ff f98f 	bl	8000100 <__udivsi3>
 8000de2:	0003      	movs	r3, r0
 8000de4:	0019      	movs	r1, r3
 8000de6:	0020      	movs	r0, r4
 8000de8:	f7ff f98a 	bl	8000100 <__udivsi3>
 8000dec:	0003      	movs	r3, r0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 f917 	bl	8001022 <HAL_SYSTICK_Config>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d112      	bne.n	8000e1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d80a      	bhi.n	8000e14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	425b      	negs	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f8e6 	bl	8000fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_InitTick+0x90>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e00d      	b.n	8000e30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e008      	b.n	8000e30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1e:	230f      	movs	r3, #15
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e003      	b.n	8000e30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	781b      	ldrb	r3, [r3, #0]
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b005      	add	sp, #20
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HAL_IncTick+0x18>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	18d2      	adds	r2, r2, r3
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_IncTick+0x18>)
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000110 	.word	0x20000110
 8000e68:	20000008 	.word	0x20000008

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000110 	.word	0x20000110

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b7f      	cmp	r3, #127	; 0x7f
 8000e92:	d809      	bhi.n	8000ea8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_EnableIRQ+0x30>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec8:	d828      	bhi.n	8000f1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <__NVIC_SetPriority+0xd4>)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	33c0      	adds	r3, #192	; 0xc0
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	589b      	ldr	r3, [r3, r2]
 8000eda:	1dfa      	adds	r2, r7, #7
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	21ff      	movs	r1, #255	; 0xff
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	401a      	ands	r2, r3
 8000ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	401a      	ands	r2, r3
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	0018      	movs	r0, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	4003      	ands	r3, r0
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	481f      	ldr	r0, [pc, #124]	; (8000f88 <__NVIC_SetPriority+0xd4>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	430a      	orrs	r2, r1
 8000f14:	33c0      	adds	r3, #192	; 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f1a:	e031      	b.n	8000f80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <__NVIC_SetPriority+0xd8>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0019      	movs	r1, r3
 8000f24:	230f      	movs	r3, #15
 8000f26:	400b      	ands	r3, r1
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3306      	adds	r3, #6
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	1dfa      	adds	r2, r7, #7
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	400a      	ands	r2, r1
 8000f40:	00d2      	lsls	r2, r2, #3
 8000f42:	21ff      	movs	r1, #255	; 0xff
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	401a      	ands	r2, r3
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	4003      	ands	r3, r0
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <__NVIC_SetPriority+0xd8>)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	001c      	movs	r4, r3
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	4023      	ands	r3, r4
 8000f70:	3b08      	subs	r3, #8
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	430a      	orrs	r2, r1
 8000f76:	3306      	adds	r3, #6
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	18c3      	adds	r3, r0, r3
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b003      	add	sp, #12
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <SysTick_Config+0x40>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e010      	b.n	8000fc8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <SysTick_Config+0x44>)
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff7d 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SysTick_Config+0x44>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x44>)
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	00ffffff 	.word	0x00ffffff
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	0002      	movs	r2, r0
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ffaf 	bl	8000f90 <SysTick_Config>
 8001032:	0003      	movs	r3, r0
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e077      	b.n	800113e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <HAL_DMA_Init+0x10c>)
 8001054:	4694      	mov	ip, r2
 8001056:	4463      	add	r3, ip
 8001058:	2114      	movs	r1, #20
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff f850 	bl	8000100 <__udivsi3>
 8001060:	0003      	movs	r3, r0
 8001062:	009a      	lsls	r2, r3, #2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2225      	movs	r2, #37	; 0x25
 800106c:	2102      	movs	r1, #2
 800106e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4934      	ldr	r1, [pc, #208]	; (800114c <HAL_DMA_Init+0x110>)
 800107c:	400a      	ands	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 f8fb 	bl	80012b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	01db      	lsls	r3, r3, #7
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d102      	bne.n	80010d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	21ff      	movs	r1, #255	; 0xff
 80010da:	400a      	ands	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d011      	beq.n	8001114 <HAL_DMA_Init+0xd8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d80d      	bhi.n	8001114 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f906 	bl	800130c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	e008      	b.n	8001126 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2225      	movs	r2, #37	; 0x25
 8001130:	2101      	movs	r1, #1
 8001132:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	bffdfff8 	.word	0xbffdfff8
 800114c:	ffff800f 	.word	0xffff800f

08001150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001158:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	221c      	movs	r2, #28
 800116c:	4013      	ands	r3, r2
 800116e:	2204      	movs	r2, #4
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4013      	ands	r3, r2
 8001178:	d027      	beq.n	80011ca <HAL_DMA_IRQHandler+0x7a>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2204      	movs	r2, #4
 800117e:	4013      	ands	r3, r2
 8001180:	d023      	beq.n	80011ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2220      	movs	r2, #32
 800118a:	4013      	ands	r3, r2
 800118c:	d107      	bne.n	800119e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2104      	movs	r1, #4
 800119a:	438a      	bics	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	221c      	movs	r2, #28
 80011a8:	4013      	ands	r3, r2
 80011aa:	2204      	movs	r2, #4
 80011ac:	409a      	lsls	r2, r3
 80011ae:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <HAL_DMA_IRQHandler+0x6e>
 80011bc:	e073      	b.n	80012a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	0010      	movs	r0, r2
 80011c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011c8:	e06d      	b.n	80012a6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	221c      	movs	r2, #28
 80011d0:	4013      	ands	r3, r2
 80011d2:	2202      	movs	r2, #2
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4013      	ands	r3, r2
 80011dc:	d02e      	beq.n	800123c <HAL_DMA_IRQHandler+0xec>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d02a      	beq.n	800123c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2220      	movs	r2, #32
 80011ee:	4013      	ands	r3, r2
 80011f0:	d10b      	bne.n	800120a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	210a      	movs	r1, #10
 80011fe:	438a      	bics	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2225      	movs	r2, #37	; 0x25
 8001206:	2101      	movs	r1, #1
 8001208:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 800120c:	6859      	ldr	r1, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	221c      	movs	r2, #28
 8001214:	4013      	ands	r3, r2
 8001216:	2202      	movs	r2, #2
 8001218:	409a      	lsls	r2, r3
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03a      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	0010      	movs	r0, r2
 8001238:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800123a:	e034      	b.n	80012a6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	221c      	movs	r2, #28
 8001242:	4013      	ands	r3, r2
 8001244:	2208      	movs	r2, #8
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	d02b      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x158>
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2208      	movs	r2, #8
 8001254:	4013      	ands	r3, r2
 8001256:	d027      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	210e      	movs	r1, #14
 8001264:	438a      	bics	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 800126a:	6859      	ldr	r1, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	221c      	movs	r2, #28
 8001272:	4013      	ands	r3, r2
 8001274:	2201      	movs	r2, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_DMA_IRQHandler+0x160>)
 800127a:	430a      	orrs	r2, r1
 800127c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2225      	movs	r2, #37	; 0x25
 8001288:	2101      	movs	r1, #1
 800128a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2224      	movs	r2, #36	; 0x24
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	0010      	movs	r0, r2
 80012a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46c0      	nop			; (mov r8, r8)
}
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000

080012b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	23ff      	movs	r3, #255	; 0xff
 80012c4:	4013      	ands	r3, r2
 80012c6:	3b08      	subs	r3, #8
 80012c8:	2114      	movs	r1, #20
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7fe ff18 	bl	8000100 <__udivsi3>
 80012d0:	0003      	movs	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80012dc:	4694      	mov	ip, r2
 80012de:	4463      	add	r3, ip
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	001a      	movs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80012ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	221c      	movs	r2, #28
 80012f2:	4013      	ands	r3, r2
 80012f4:	2201      	movs	r2, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}
 8001304:	10008200 	.word	0x10008200
 8001308:	40020880 	.word	0x40020880

0800130c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001322:	4694      	mov	ip, r2
 8001324:	4463      	add	r3, ip
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	001a      	movs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001332:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}
 800134c:	1000823f 	.word	0x1000823f
 8001350:	40020940 	.word	0x40020940

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e147      	b.n	80015f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d100      	bne.n	800137c <HAL_GPIO_Init+0x28>
 800137a:	e138      	b.n	80015ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x38>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b12      	cmp	r3, #18
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	58d3      	ldr	r3, [r2, r3]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2207      	movs	r2, #7
 800139e:	4013      	ands	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2107      	movs	r1, #7
 80013b8:	400b      	ands	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	0013      	movs	r3, r2
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d00b      	beq.n	8001428 <HAL_GPIO_Init+0xd4>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800141c:	2b11      	cmp	r3, #17
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b12      	cmp	r3, #18
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	409a      	lsls	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	43da      	mvns	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	2201      	movs	r2, #1
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	055b      	lsls	r3, r3, #21
 80014c2:	4013      	ands	r3, r2
 80014c4:	d100      	bne.n	80014c8 <HAL_GPIO_Init+0x174>
 80014c6:	e092      	b.n	80015ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014c8:	4a50      	ldr	r2, [pc, #320]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3318      	adds	r3, #24
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	589b      	ldr	r3, [r3, r2]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2203      	movs	r2, #3
 80014da:	4013      	ands	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	220f      	movs	r2, #15
 80014e0:	409a      	lsls	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x1ca>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a45      	ldr	r2, [pc, #276]	; (8001610 <HAL_GPIO_Init+0x2bc>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x1c6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a44      	ldr	r2, [pc, #272]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x1c2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a43      	ldr	r2, [pc, #268]	; (8001618 <HAL_GPIO_Init+0x2c4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x1be>
 800150e:	2303      	movs	r3, #3
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x1cc>
 8001512:	2305      	movs	r3, #5
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x1cc>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x1cc>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x1cc>
 800151e:	2300      	movs	r3, #0
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	2103      	movs	r1, #3
 8001524:	400a      	ands	r2, r1
 8001526:	00d2      	lsls	r2, r2, #3
 8001528:	4093      	lsls	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001530:	4936      	ldr	r1, [pc, #216]	; (800160c <HAL_GPIO_Init+0x2b8>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3318      	adds	r3, #24
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153e:	4a33      	ldr	r2, [pc, #204]	; (800160c <HAL_GPIO_Init+0x2b8>)
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	58d3      	ldr	r3, [r2, r3]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	4013      	ands	r3, r2
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001564:	4929      	ldr	r1, [pc, #164]	; (800160c <HAL_GPIO_Init+0x2b8>)
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_GPIO_Init+0x2b8>)
 800156e:	2384      	movs	r3, #132	; 0x84
 8001570:	58d3      	ldr	r3, [r2, r3]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	029b      	lsls	r3, r3, #10
 8001586:	4013      	ands	r3, r2
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001592:	491e      	ldr	r1, [pc, #120]	; (800160c <HAL_GPIO_Init+0x2b8>)
 8001594:	2284      	movs	r2, #132	; 0x84
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_GPIO_Init+0x2b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	035b      	lsls	r3, r3, #13
 80015b2:	4013      	ands	r3, r2
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	039b      	lsls	r3, r3, #14
 80015dc:	4013      	ands	r3, r2
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	1e13      	subs	r3, r2, #0
 80015fe:	d000      	beq.n	8001602 <HAL_GPIO_Init+0x2ae>
 8001600:	e6b0      	b.n	8001364 <HAL_GPIO_Init+0x10>
  }
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b006      	add	sp, #24
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021800 	.word	0x40021800
 8001610:	50000400 	.word	0x50000400
 8001614:	50000800 	.word	0x50000800
 8001618:	50000c00 	.word	0x50000c00

0800161c <LL_RCC_GetAPB1Prescaler>:
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	23e0      	movs	r3, #224	; 0xe0
 8001626:	01db      	lsls	r3, r3, #7
 8001628:	4013      	ands	r3, r2
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2238      	movs	r2, #56	; 0x38
 8001640:	4013      	ands	r3, r2
 8001642:	d10f      	bne.n	8001664 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0adb      	lsrs	r3, r3, #11
 800164a:	2207      	movs	r2, #7
 800164c:	4013      	ands	r3, r2
 800164e:	2201      	movs	r2, #1
 8001650:	409a      	lsls	r2, r3
 8001652:	0013      	movs	r3, r2
 8001654:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	4835      	ldr	r0, [pc, #212]	; (8001730 <HAL_RCC_GetSysClockFreq+0xfc>)
 800165a:	f7fe fd51 	bl	8000100 <__udivsi3>
 800165e:	0003      	movs	r3, r0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	e05d      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2238      	movs	r2, #56	; 0x38
 800166a:	4013      	ands	r3, r2
 800166c:	2b08      	cmp	r3, #8
 800166e:	d102      	bne.n	8001676 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_RCC_GetSysClockFreq+0x100>)
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e054      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2238      	movs	r2, #56	; 0x38
 800167c:	4013      	ands	r3, r2
 800167e:	2b10      	cmp	r3, #16
 8001680:	d138      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2203      	movs	r2, #3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	3301      	adds	r3, #1
 8001698:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d10d      	bne.n	80016bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	4824      	ldr	r0, [pc, #144]	; (8001734 <HAL_RCC_GetSysClockFreq+0x100>)
 80016a4:	f7fe fd2c 	bl	8000100 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	0019      	movs	r1, r3
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	227f      	movs	r2, #127	; 0x7f
 80016b4:	4013      	ands	r3, r2
 80016b6:	434b      	muls	r3, r1
 80016b8:	617b      	str	r3, [r7, #20]
        break;
 80016ba:	e00d      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016c0:	f7fe fd1e 	bl	8000100 <__udivsi3>
 80016c4:	0003      	movs	r3, r0
 80016c6:	0019      	movs	r1, r3
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	227f      	movs	r2, #127	; 0x7f
 80016d0:	4013      	ands	r3, r2
 80016d2:	434b      	muls	r3, r1
 80016d4:	617b      	str	r3, [r7, #20]
        break;
 80016d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0f5b      	lsrs	r3, r3, #29
 80016de:	2207      	movs	r2, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	3301      	adds	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7fe fd09 	bl	8000100 <__udivsi3>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e015      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2238      	movs	r2, #56	; 0x38
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d103      	bne.n	8001708 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2238      	movs	r2, #56	; 0x38
 800170e:	4013      	ands	r3, r2
 8001710:	2b18      	cmp	r3, #24
 8001712:	d103      	bne.n	800171c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001714:	23fa      	movs	r3, #250	; 0xfa
 8001716:	01db      	lsls	r3, r3, #7
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	e001      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001720:	693b      	ldr	r3, [r7, #16]
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b006      	add	sp, #24
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40021000 	.word	0x40021000
 8001730:	00f42400 	.word	0x00f42400
 8001734:	007a1200 	.word	0x007a1200

08001738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <HAL_RCC_GetHCLKFreq+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001750:	f7ff fff2 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 8001754:	0004      	movs	r4, r0
 8001756:	f7ff ff61 	bl	800161c <LL_RCC_GetAPB1Prescaler>
 800175a:	0003      	movs	r3, r0
 800175c:	0b1a      	lsrs	r2, r3, #12
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	58d3      	ldr	r3, [r2, r3]
 8001764:	221f      	movs	r2, #31
 8001766:	4013      	ands	r3, r2
 8001768:	40dc      	lsrs	r4, r3
 800176a:	0023      	movs	r3, r4
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bdb0      	pop	{r4, r5, r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	08002b3c 	.word	0x08002b3c

08001778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e046      	b.n	8001818 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	589b      	ldr	r3, [r3, r2]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	227c      	movs	r2, #124	; 0x7c
 8001798:	2100      	movs	r1, #0
 800179a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff fa16 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	2124      	movs	r1, #36	; 0x24
 80017aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2101      	movs	r1, #1
 80017b8:	438a      	bics	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 f830 	bl	8001824 <UART_SetConfig>
 80017c4:	0003      	movs	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e024      	b.n	8001818 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fc71 	bl	80020c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	490d      	ldr	r1, [pc, #52]	; (8001820 <HAL_UART_Init+0xa8>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	212a      	movs	r1, #42	; 0x2a
 80017fa:	438a      	bics	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0018      	movs	r0, r3
 8001812:	f000 fd09 	bl	8002228 <UART_CheckIdleState>
 8001816:	0003      	movs	r3, r0
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}
 8001820:	ffffb7ff 	.word	0xffffb7ff

08001824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001830:	231e      	movs	r3, #30
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4abc      	ldr	r2, [pc, #752]	; (8001b58 <UART_SetConfig+0x334>)
 8001866:	4013      	ands	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4ab8      	ldr	r2, [pc, #736]	; (8001b5c <UART_SetConfig+0x338>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4aaf      	ldr	r2, [pc, #700]	; (8001b60 <UART_SetConfig+0x33c>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	220f      	movs	r2, #15
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4aa5      	ldr	r2, [pc, #660]	; (8001b64 <UART_SetConfig+0x340>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d125      	bne.n	8001920 <UART_SetConfig+0xfc>
 80018d4:	4ba4      	ldr	r3, [pc, #656]	; (8001b68 <UART_SetConfig+0x344>)
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d00f      	beq.n	8001900 <UART_SetConfig+0xdc>
 80018e0:	d304      	bcc.n	80018ec <UART_SetConfig+0xc8>
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d007      	beq.n	80018f6 <UART_SetConfig+0xd2>
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d00f      	beq.n	800190a <UART_SetConfig+0xe6>
 80018ea:	e013      	b.n	8001914 <UART_SetConfig+0xf0>
 80018ec:	231f      	movs	r3, #31
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e022      	b.n	800193c <UART_SetConfig+0x118>
 80018f6:	231f      	movs	r3, #31
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e01d      	b.n	800193c <UART_SetConfig+0x118>
 8001900:	231f      	movs	r3, #31
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2204      	movs	r2, #4
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e018      	b.n	800193c <UART_SetConfig+0x118>
 800190a:	231f      	movs	r3, #31
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2208      	movs	r2, #8
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e013      	b.n	800193c <UART_SetConfig+0x118>
 8001914:	231f      	movs	r3, #31
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2210      	movs	r2, #16
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	e00d      	b.n	800193c <UART_SetConfig+0x118>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a91      	ldr	r2, [pc, #580]	; (8001b6c <UART_SetConfig+0x348>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d104      	bne.n	8001934 <UART_SetConfig+0x110>
 800192a:	231f      	movs	r3, #31
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e003      	b.n	800193c <UART_SetConfig+0x118>
 8001934:	231f      	movs	r3, #31
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	2210      	movs	r2, #16
 800193a:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69da      	ldr	r2, [r3, #28]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	429a      	cmp	r2, r3
 8001946:	d000      	beq.n	800194a <UART_SetConfig+0x126>
 8001948:	e1db      	b.n	8001d02 <UART_SetConfig+0x4de>
  {
    switch (clocksource)
 800194a:	231f      	movs	r3, #31
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d100      	bne.n	8001956 <UART_SetConfig+0x132>
 8001954:	e06c      	b.n	8001a30 <UART_SetConfig+0x20c>
 8001956:	dc02      	bgt.n	800195e <UART_SetConfig+0x13a>
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <UART_SetConfig+0x148>
 800195c:	e1a8      	b.n	8001cb0 <UART_SetConfig+0x48c>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d100      	bne.n	8001964 <UART_SetConfig+0x140>
 8001962:	e0bc      	b.n	8001ade <UART_SetConfig+0x2ba>
 8001964:	2b08      	cmp	r3, #8
 8001966:	d100      	bne.n	800196a <UART_SetConfig+0x146>
 8001968:	e141      	b.n	8001bee <UART_SetConfig+0x3ca>
 800196a:	e1a1      	b.n	8001cb0 <UART_SetConfig+0x48c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800196c:	f7ff feee 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001970:	0003      	movs	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d044      	beq.n	8001a06 <UART_SetConfig+0x1e2>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2b01      	cmp	r3, #1
 8001982:	d03e      	beq.n	8001a02 <UART_SetConfig+0x1de>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2b02      	cmp	r3, #2
 800198a:	d038      	beq.n	80019fe <UART_SetConfig+0x1da>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2b03      	cmp	r3, #3
 8001992:	d032      	beq.n	80019fa <UART_SetConfig+0x1d6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b04      	cmp	r3, #4
 800199a:	d02c      	beq.n	80019f6 <UART_SetConfig+0x1d2>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d026      	beq.n	80019f2 <UART_SetConfig+0x1ce>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d020      	beq.n	80019ee <UART_SetConfig+0x1ca>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2b07      	cmp	r3, #7
 80019b2:	d01a      	beq.n	80019ea <UART_SetConfig+0x1c6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d014      	beq.n	80019e6 <UART_SetConfig+0x1c2>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d00e      	beq.n	80019e2 <UART_SetConfig+0x1be>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b0a      	cmp	r3, #10
 80019ca:	d008      	beq.n	80019de <UART_SetConfig+0x1ba>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2b0b      	cmp	r3, #11
 80019d2:	d102      	bne.n	80019da <UART_SetConfig+0x1b6>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	e016      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019da:	2301      	movs	r3, #1
 80019dc:	e014      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	e012      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	e010      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019e6:	2320      	movs	r3, #32
 80019e8:	e00e      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019ea:	2310      	movs	r3, #16
 80019ec:	e00c      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019ee:	230c      	movs	r3, #12
 80019f0:	e00a      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019f2:	230a      	movs	r3, #10
 80019f4:	e008      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019f6:	2308      	movs	r3, #8
 80019f8:	e006      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e004      	b.n	8001a08 <UART_SetConfig+0x1e4>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e002      	b.n	8001a08 <UART_SetConfig+0x1e4>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e000      	b.n	8001a08 <UART_SetConfig+0x1e4>
 8001a06:	2301      	movs	r3, #1
 8001a08:	0019      	movs	r1, r3
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7fe fb78 	bl	8000100 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	005a      	lsls	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	18d2      	adds	r2, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0019      	movs	r1, r3
 8001a22:	0010      	movs	r0, r2
 8001a24:	f7fe fb6c 	bl	8000100 <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	617b      	str	r3, [r7, #20]
        break;
 8001a2e:	e144      	b.n	8001cba <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d043      	beq.n	8001ac0 <UART_SetConfig+0x29c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d03d      	beq.n	8001abc <UART_SetConfig+0x298>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d037      	beq.n	8001ab8 <UART_SetConfig+0x294>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d031      	beq.n	8001ab4 <UART_SetConfig+0x290>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d02b      	beq.n	8001ab0 <UART_SetConfig+0x28c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d025      	beq.n	8001aac <UART_SetConfig+0x288>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	d01f      	beq.n	8001aa8 <UART_SetConfig+0x284>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d019      	beq.n	8001aa4 <UART_SetConfig+0x280>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d013      	beq.n	8001aa0 <UART_SetConfig+0x27c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d00d      	beq.n	8001a9c <UART_SetConfig+0x278>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b0a      	cmp	r3, #10
 8001a86:	d007      	beq.n	8001a98 <UART_SetConfig+0x274>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2b0b      	cmp	r3, #11
 8001a8e:	d101      	bne.n	8001a94 <UART_SetConfig+0x270>
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <UART_SetConfig+0x34c>)
 8001a92:	e016      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001a94:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <UART_SetConfig+0x350>)
 8001a96:	e014      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <UART_SetConfig+0x354>)
 8001a9a:	e012      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <UART_SetConfig+0x358>)
 8001a9e:	e010      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <UART_SetConfig+0x35c>)
 8001aa2:	e00e      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001aa4:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <UART_SetConfig+0x360>)
 8001aa6:	e00c      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001aa8:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <UART_SetConfig+0x364>)
 8001aaa:	e00a      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <UART_SetConfig+0x368>)
 8001aae:	e008      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <UART_SetConfig+0x36c>)
 8001ab2:	e006      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <UART_SetConfig+0x370>)
 8001ab6:	e004      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <UART_SetConfig+0x374>)
 8001aba:	e002      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001abc:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <UART_SetConfig+0x378>)
 8001abe:	e000      	b.n	8001ac2 <UART_SetConfig+0x29e>
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <UART_SetConfig+0x350>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6852      	ldr	r2, [r2, #4]
 8001ac6:	0852      	lsrs	r2, r2, #1
 8001ac8:	189a      	adds	r2, r3, r2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	0019      	movs	r1, r3
 8001ad0:	0010      	movs	r0, r2
 8001ad2:	f7fe fb15 	bl	8000100 <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	617b      	str	r3, [r7, #20]
        break;
 8001adc:	e0ed      	b.n	8001cba <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ade:	f7ff fda9 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d100      	bne.n	8001af0 <UART_SetConfig+0x2cc>
 8001aee:	e069      	b.n	8001bc4 <UART_SetConfig+0x3a0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d100      	bne.n	8001afa <UART_SetConfig+0x2d6>
 8001af8:	e062      	b.n	8001bc0 <UART_SetConfig+0x39c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d05c      	beq.n	8001bbc <UART_SetConfig+0x398>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d056      	beq.n	8001bb8 <UART_SetConfig+0x394>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d050      	beq.n	8001bb4 <UART_SetConfig+0x390>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d04a      	beq.n	8001bb0 <UART_SetConfig+0x38c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d044      	beq.n	8001bac <UART_SetConfig+0x388>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b07      	cmp	r3, #7
 8001b28:	d03e      	beq.n	8001ba8 <UART_SetConfig+0x384>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d038      	beq.n	8001ba4 <UART_SetConfig+0x380>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b09      	cmp	r3, #9
 8001b38:	d032      	beq.n	8001ba0 <UART_SetConfig+0x37c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d008      	beq.n	8001b54 <UART_SetConfig+0x330>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	2b0b      	cmp	r3, #11
 8001b48:	d102      	bne.n	8001b50 <UART_SetConfig+0x32c>
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	e03a      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e038      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	e036      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001b58:	cfff69f3 	.word	0xcfff69f3
 8001b5c:	ffffcfff 	.word	0xffffcfff
 8001b60:	11fff4ff 	.word	0x11fff4ff
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	0001e848 	.word	0x0001e848
 8001b74:	01e84800 	.word	0x01e84800
 8001b78:	0003d090 	.word	0x0003d090
 8001b7c:	0007a120 	.word	0x0007a120
 8001b80:	000f4240 	.word	0x000f4240
 8001b84:	001e8480 	.word	0x001e8480
 8001b88:	0028b0aa 	.word	0x0028b0aa
 8001b8c:	0030d400 	.word	0x0030d400
 8001b90:	003d0900 	.word	0x003d0900
 8001b94:	00516154 	.word	0x00516154
 8001b98:	007a1200 	.word	0x007a1200
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	e010      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e00e      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001ba8:	2310      	movs	r3, #16
 8001baa:	e00c      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bac:	230c      	movs	r3, #12
 8001bae:	e00a      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	e008      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	e006      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bb8:	2306      	movs	r3, #6
 8001bba:	e004      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e002      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e000      	b.n	8001bc6 <UART_SetConfig+0x3a2>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7fe fa99 	bl	8000100 <__udivsi3>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	005a      	lsls	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	18d2      	adds	r2, r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f7fe fa8d 	bl	8000100 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	617b      	str	r3, [r7, #20]
        break;
 8001bec:	e065      	b.n	8001cba <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04c      	beq.n	8001c90 <UART_SetConfig+0x46c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d045      	beq.n	8001c8a <UART_SetConfig+0x466>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d03e      	beq.n	8001c84 <UART_SetConfig+0x460>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d038      	beq.n	8001c80 <UART_SetConfig+0x45c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d031      	beq.n	8001c7a <UART_SetConfig+0x456>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d02b      	beq.n	8001c76 <UART_SetConfig+0x452>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d025      	beq.n	8001c72 <UART_SetConfig+0x44e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d01e      	beq.n	8001c6c <UART_SetConfig+0x448>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d017      	beq.n	8001c66 <UART_SetConfig+0x442>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d010      	beq.n	8001c60 <UART_SetConfig+0x43c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d009      	beq.n	8001c5a <UART_SetConfig+0x436>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	2b0b      	cmp	r3, #11
 8001c4c:	d102      	bne.n	8001c54 <UART_SetConfig+0x430>
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	e01f      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	025b      	lsls	r3, r3, #9
 8001c58:	e01c      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	e019      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	e016      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	e013      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	015b      	lsls	r3, r3, #5
 8001c70:	e010      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c72:	4bba      	ldr	r3, [pc, #744]	; (8001f5c <UART_SetConfig+0x738>)
 8001c74:	e00e      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c76:	4bba      	ldr	r3, [pc, #744]	; (8001f60 <UART_SetConfig+0x73c>)
 8001c78:	e00c      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	019b      	lsls	r3, r3, #6
 8001c7e:	e009      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c80:	4bb8      	ldr	r3, [pc, #736]	; (8001f64 <UART_SetConfig+0x740>)
 8001c82:	e007      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	01db      	lsls	r3, r3, #7
 8001c88:	e004      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	e001      	b.n	8001c94 <UART_SetConfig+0x470>
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	025b      	lsls	r3, r3, #9
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6852      	ldr	r2, [r2, #4]
 8001c98:	0852      	lsrs	r2, r2, #1
 8001c9a:	189a      	adds	r2, r3, r2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	0010      	movs	r0, r2
 8001ca4:	f7fe fa2c 	bl	8000100 <__udivsi3>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	617b      	str	r3, [r7, #20]
        break;
 8001cae:	e004      	b.n	8001cba <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8001cb0:	231e      	movs	r3, #30
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
        break;
 8001cb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d91b      	bls.n	8001cf8 <UART_SetConfig+0x4d4>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4aa9      	ldr	r2, [pc, #676]	; (8001f68 <UART_SetConfig+0x744>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d817      	bhi.n	8001cf8 <UART_SetConfig+0x4d4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	200a      	movs	r0, #10
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	438a      	bics	r2, r1
 8001cd4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	183b      	adds	r3, r7, r0
 8001ce4:	183a      	adds	r2, r7, r0
 8001ce6:	8812      	ldrh	r2, [r2, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	183a      	adds	r2, r7, r0
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	e1c6      	b.n	8002086 <UART_SetConfig+0x862>
    }
    else
    {
      ret = HAL_ERROR;
 8001cf8:	231e      	movs	r3, #30
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e1c1      	b.n	8002086 <UART_SetConfig+0x862>
    }
  }
  else
  {
    switch (clocksource)
 8001d02:	231f      	movs	r3, #31
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d100      	bne.n	8001d0e <UART_SetConfig+0x4ea>
 8001d0c:	e06c      	b.n	8001de8 <UART_SetConfig+0x5c4>
 8001d0e:	dc02      	bgt.n	8001d16 <UART_SetConfig+0x4f2>
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <UART_SetConfig+0x500>
 8001d14:	e1a2      	b.n	800205c <UART_SetConfig+0x838>
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d100      	bne.n	8001d1c <UART_SetConfig+0x4f8>
 8001d1a:	e0bc      	b.n	8001e96 <UART_SetConfig+0x672>
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d100      	bne.n	8001d22 <UART_SetConfig+0x4fe>
 8001d20:	e13c      	b.n	8001f9c <UART_SetConfig+0x778>
 8001d22:	e19b      	b.n	800205c <UART_SetConfig+0x838>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d24:	f7ff fd12 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d044      	beq.n	8001dbe <UART_SetConfig+0x59a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d03e      	beq.n	8001dba <UART_SetConfig+0x596>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d038      	beq.n	8001db6 <UART_SetConfig+0x592>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d032      	beq.n	8001db2 <UART_SetConfig+0x58e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d02c      	beq.n	8001dae <UART_SetConfig+0x58a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d026      	beq.n	8001daa <UART_SetConfig+0x586>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d020      	beq.n	8001da6 <UART_SetConfig+0x582>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	d01a      	beq.n	8001da2 <UART_SetConfig+0x57e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d014      	beq.n	8001d9e <UART_SetConfig+0x57a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d00e      	beq.n	8001d9a <UART_SetConfig+0x576>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b0a      	cmp	r3, #10
 8001d82:	d008      	beq.n	8001d96 <UART_SetConfig+0x572>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	2b0b      	cmp	r3, #11
 8001d8a:	d102      	bne.n	8001d92 <UART_SetConfig+0x56e>
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	e016      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e014      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	e012      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001d9a:	2340      	movs	r3, #64	; 0x40
 8001d9c:	e010      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001d9e:	2320      	movs	r3, #32
 8001da0:	e00e      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001da2:	2310      	movs	r3, #16
 8001da4:	e00c      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001da6:	230c      	movs	r3, #12
 8001da8:	e00a      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001daa:	230a      	movs	r3, #10
 8001dac:	e008      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001dae:	2308      	movs	r3, #8
 8001db0:	e006      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e004      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e002      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e000      	b.n	8001dc0 <UART_SetConfig+0x59c>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7fe f99c 	bl	8000100 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	001a      	movs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	18d2      	adds	r2, r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0019      	movs	r1, r3
 8001dda:	0010      	movs	r0, r2
 8001ddc:	f7fe f990 	bl	8000100 <__udivsi3>
 8001de0:	0003      	movs	r3, r0
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	617b      	str	r3, [r7, #20]
        break;
 8001de6:	e13e      	b.n	8002066 <UART_SetConfig+0x842>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d043      	beq.n	8001e78 <UART_SetConfig+0x654>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d03d      	beq.n	8001e74 <UART_SetConfig+0x650>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d037      	beq.n	8001e70 <UART_SetConfig+0x64c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d031      	beq.n	8001e6c <UART_SetConfig+0x648>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d02b      	beq.n	8001e68 <UART_SetConfig+0x644>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d025      	beq.n	8001e64 <UART_SetConfig+0x640>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	2b06      	cmp	r3, #6
 8001e1e:	d01f      	beq.n	8001e60 <UART_SetConfig+0x63c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	d019      	beq.n	8001e5c <UART_SetConfig+0x638>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d013      	beq.n	8001e58 <UART_SetConfig+0x634>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d00d      	beq.n	8001e54 <UART_SetConfig+0x630>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2b0a      	cmp	r3, #10
 8001e3e:	d007      	beq.n	8001e50 <UART_SetConfig+0x62c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2b0b      	cmp	r3, #11
 8001e46:	d101      	bne.n	8001e4c <UART_SetConfig+0x628>
 8001e48:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <UART_SetConfig+0x748>)
 8001e4a:	e016      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e4c:	4b48      	ldr	r3, [pc, #288]	; (8001f70 <UART_SetConfig+0x74c>)
 8001e4e:	e014      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e50:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <UART_SetConfig+0x750>)
 8001e52:	e012      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <UART_SetConfig+0x754>)
 8001e56:	e010      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e58:	4b48      	ldr	r3, [pc, #288]	; (8001f7c <UART_SetConfig+0x758>)
 8001e5a:	e00e      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <UART_SetConfig+0x75c>)
 8001e5e:	e00c      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <UART_SetConfig+0x760>)
 8001e62:	e00a      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e64:	4b48      	ldr	r3, [pc, #288]	; (8001f88 <UART_SetConfig+0x764>)
 8001e66:	e008      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e68:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <UART_SetConfig+0x768>)
 8001e6a:	e006      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e6c:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <UART_SetConfig+0x76c>)
 8001e6e:	e004      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e70:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <UART_SetConfig+0x770>)
 8001e72:	e002      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e74:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <UART_SetConfig+0x774>)
 8001e76:	e000      	b.n	8001e7a <UART_SetConfig+0x656>
 8001e78:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <UART_SetConfig+0x74c>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6852      	ldr	r2, [r2, #4]
 8001e7e:	0852      	lsrs	r2, r2, #1
 8001e80:	189a      	adds	r2, r3, r2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0019      	movs	r1, r3
 8001e88:	0010      	movs	r0, r2
 8001e8a:	f7fe f939 	bl	8000100 <__udivsi3>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	617b      	str	r3, [r7, #20]
        break;
 8001e94:	e0e7      	b.n	8002066 <UART_SetConfig+0x842>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e96:	f7ff fbcd 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d044      	beq.n	8001f30 <UART_SetConfig+0x70c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d03e      	beq.n	8001f2c <UART_SetConfig+0x708>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d038      	beq.n	8001f28 <UART_SetConfig+0x704>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d032      	beq.n	8001f24 <UART_SetConfig+0x700>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d02c      	beq.n	8001f20 <UART_SetConfig+0x6fc>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d026      	beq.n	8001f1c <UART_SetConfig+0x6f8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d020      	beq.n	8001f18 <UART_SetConfig+0x6f4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d01a      	beq.n	8001f14 <UART_SetConfig+0x6f0>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d014      	beq.n	8001f10 <UART_SetConfig+0x6ec>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	d00e      	beq.n	8001f0c <UART_SetConfig+0x6e8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	2b0a      	cmp	r3, #10
 8001ef4:	d008      	beq.n	8001f08 <UART_SetConfig+0x6e4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b0b      	cmp	r3, #11
 8001efc:	d102      	bne.n	8001f04 <UART_SetConfig+0x6e0>
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	e016      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e014      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	e012      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f0c:	2340      	movs	r3, #64	; 0x40
 8001f0e:	e010      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f10:	2320      	movs	r3, #32
 8001f12:	e00e      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f14:	2310      	movs	r3, #16
 8001f16:	e00c      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f18:	230c      	movs	r3, #12
 8001f1a:	e00a      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	e008      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f20:	2308      	movs	r3, #8
 8001f22:	e006      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f24:	2306      	movs	r3, #6
 8001f26:	e004      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e002      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e000      	b.n	8001f32 <UART_SetConfig+0x70e>
 8001f30:	2301      	movs	r3, #1
 8001f32:	0019      	movs	r1, r3
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7fe f8e3 	bl	8000100 <__udivsi3>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	18d2      	adds	r2, r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	f7fe f8d7 	bl	8000100 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	617b      	str	r3, [r7, #20]
        break;
 8001f58:	e085      	b.n	8002066 <UART_SetConfig+0x842>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	00001554 	.word	0x00001554
 8001f60:	00001998 	.word	0x00001998
 8001f64:	00002aaa 	.word	0x00002aaa
 8001f68:	0000ffff 	.word	0x0000ffff
 8001f6c:	0000f424 	.word	0x0000f424
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	0001e848 	.word	0x0001e848
 8001f78:	0003d090 	.word	0x0003d090
 8001f7c:	0007a120 	.word	0x0007a120
 8001f80:	000f4240 	.word	0x000f4240
 8001f84:	00145855 	.word	0x00145855
 8001f88:	00186a00 	.word	0x00186a00
 8001f8c:	001e8480 	.word	0x001e8480
 8001f90:	0028b0aa 	.word	0x0028b0aa
 8001f94:	003d0900 	.word	0x003d0900
 8001f98:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d04b      	beq.n	800203c <UART_SetConfig+0x818>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d044      	beq.n	8002036 <UART_SetConfig+0x812>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d03d      	beq.n	8002030 <UART_SetConfig+0x80c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d037      	beq.n	800202c <UART_SetConfig+0x808>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d030      	beq.n	8002026 <UART_SetConfig+0x802>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d02a      	beq.n	8002022 <UART_SetConfig+0x7fe>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d024      	beq.n	800201e <UART_SetConfig+0x7fa>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	d01d      	beq.n	8002018 <UART_SetConfig+0x7f4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d016      	beq.n	8002012 <UART_SetConfig+0x7ee>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d00f      	beq.n	800200c <UART_SetConfig+0x7e8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2b0a      	cmp	r3, #10
 8001ff2:	d008      	beq.n	8002006 <UART_SetConfig+0x7e2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2b0b      	cmp	r3, #11
 8001ffa:	d101      	bne.n	8002000 <UART_SetConfig+0x7dc>
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	e01f      	b.n	8002040 <UART_SetConfig+0x81c>
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	e01c      	b.n	8002040 <UART_SetConfig+0x81c>
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	e019      	b.n	8002040 <UART_SetConfig+0x81c>
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	e016      	b.n	8002040 <UART_SetConfig+0x81c>
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	e013      	b.n	8002040 <UART_SetConfig+0x81c>
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	e010      	b.n	8002040 <UART_SetConfig+0x81c>
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <UART_SetConfig+0x88c>)
 8002020:	e00e      	b.n	8002040 <UART_SetConfig+0x81c>
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <UART_SetConfig+0x890>)
 8002024:	e00c      	b.n	8002040 <UART_SetConfig+0x81c>
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	015b      	lsls	r3, r3, #5
 800202a:	e009      	b.n	8002040 <UART_SetConfig+0x81c>
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <UART_SetConfig+0x894>)
 800202e:	e007      	b.n	8002040 <UART_SetConfig+0x81c>
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	e004      	b.n	8002040 <UART_SetConfig+0x81c>
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	e001      	b.n	8002040 <UART_SetConfig+0x81c>
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6852      	ldr	r2, [r2, #4]
 8002044:	0852      	lsrs	r2, r2, #1
 8002046:	189a      	adds	r2, r3, r2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	0019      	movs	r1, r3
 800204e:	0010      	movs	r0, r2
 8002050:	f7fe f856 	bl	8000100 <__udivsi3>
 8002054:	0003      	movs	r3, r0
 8002056:	b29b      	uxth	r3, r3
 8002058:	617b      	str	r3, [r7, #20]
        break;
 800205a:	e004      	b.n	8002066 <UART_SetConfig+0x842>
      default:
        ret = HAL_ERROR;
 800205c:	231e      	movs	r3, #30
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
        break;
 8002064:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d908      	bls.n	800207e <UART_SetConfig+0x85a>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <UART_SetConfig+0x898>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d804      	bhi.n	800207e <UART_SetConfig+0x85a>
    {
      huart->Instance->BRR = usartdiv;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	e003      	b.n	8002086 <UART_SetConfig+0x862>
    }
    else
    {
      ret = HAL_ERROR;
 800207e:	231e      	movs	r3, #30
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	226a      	movs	r2, #106	; 0x6a
 800208a:	2101      	movs	r1, #1
 800208c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2268      	movs	r2, #104	; 0x68
 8002092:	2101      	movs	r1, #1
 8002094:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80020a2:	231e      	movs	r3, #30
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b008      	add	sp, #32
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00000aaa 	.word	0x00000aaa
 80020b4:	00000ccc 	.word	0x00000ccc
 80020b8:	00001555 	.word	0x00001555
 80020bc:	0000ffff 	.word	0x0000ffff

080020c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d00b      	beq.n	80020ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <UART_AdvFeatureConfig+0x144>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	2202      	movs	r2, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	d00b      	beq.n	800210c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a43      	ldr	r2, [pc, #268]	; (8002208 <UART_AdvFeatureConfig+0x148>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	2204      	movs	r2, #4
 8002112:	4013      	ands	r3, r2
 8002114:	d00b      	beq.n	800212e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a3b      	ldr	r2, [pc, #236]	; (800220c <UART_AdvFeatureConfig+0x14c>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	2208      	movs	r2, #8
 8002134:	4013      	ands	r3, r2
 8002136:	d00b      	beq.n	8002150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a34      	ldr	r2, [pc, #208]	; (8002210 <UART_AdvFeatureConfig+0x150>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	2210      	movs	r2, #16
 8002156:	4013      	ands	r3, r2
 8002158:	d00b      	beq.n	8002172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <UART_AdvFeatureConfig+0x154>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	2220      	movs	r2, #32
 8002178:	4013      	ands	r3, r2
 800217a:	d00b      	beq.n	8002194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4a25      	ldr	r2, [pc, #148]	; (8002218 <UART_AdvFeatureConfig+0x158>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	4013      	ands	r3, r2
 800219c:	d01d      	beq.n	80021da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <UART_AdvFeatureConfig+0x15c>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	035b      	lsls	r3, r3, #13
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10b      	bne.n	80021da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a15      	ldr	r2, [pc, #84]	; (8002220 <UART_AdvFeatureConfig+0x160>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	4013      	ands	r3, r2
 80021e2:	d00b      	beq.n	80021fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <UART_AdvFeatureConfig+0x164>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
  }
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}
 8002204:	fffdffff 	.word	0xfffdffff
 8002208:	fffeffff 	.word	0xfffeffff
 800220c:	fffbffff 	.word	0xfffbffff
 8002210:	ffff7fff 	.word	0xffff7fff
 8002214:	ffffefff 	.word	0xffffefff
 8002218:	ffffdfff 	.word	0xffffdfff
 800221c:	ffefffff 	.word	0xffefffff
 8002220:	ff9fffff 	.word	0xff9fffff
 8002224:	fff7ffff 	.word	0xfff7ffff

08002228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2288      	movs	r2, #136	; 0x88
 8002234:	2100      	movs	r1, #0
 8002236:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002238:	f7fe fe18 	bl	8000e6c <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2208      	movs	r2, #8
 8002248:	4013      	ands	r3, r2
 800224a:	2b08      	cmp	r3, #8
 800224c:	d10d      	bne.n	800226a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	0399      	lsls	r1, r3, #14
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <UART_CheckIdleState+0x90>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	0013      	movs	r3, r2
 800225c:	2200      	movs	r2, #0
 800225e:	f000 f82d 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8002262:	1e03      	subs	r3, r0, #0
 8002264:	d001      	beq.n	800226a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e021      	b.n	80022ae <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2204      	movs	r2, #4
 8002272:	4013      	ands	r3, r2
 8002274:	2b04      	cmp	r3, #4
 8002276:	d10d      	bne.n	8002294 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	03d9      	lsls	r1, r3, #15
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <UART_CheckIdleState+0x90>)
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	f000 f818 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e00c      	b.n	80022ae <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	2120      	movs	r1, #32
 800229a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2284      	movs	r2, #132	; 0x84
 80022a0:	2120      	movs	r1, #32
 80022a2:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	227c      	movs	r2, #124	; 0x7c
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b004      	add	sp, #16
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	01ffffff 	.word	0x01ffffff

080022bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022cc:	e02b      	b.n	8002326 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	d028      	beq.n	8002326 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7fe fdca 	bl	8000e6c <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d302      	bcc.n	80022ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11d      	bne.n	8002326 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4916      	ldr	r1, [pc, #88]	; (8002350 <UART_WaitOnFlagUntilTimeout+0x94>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	438a      	bics	r2, r1
 8002308:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	2120      	movs	r1, #32
 8002310:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2284      	movs	r2, #132	; 0x84
 8002316:	2120      	movs	r1, #32
 8002318:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	227c      	movs	r2, #124	; 0x7c
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e00f      	b.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4013      	ands	r3, r2
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	425a      	negs	r2, r3
 8002336:	4153      	adcs	r3, r2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	001a      	movs	r2, r3
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d0c4      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	fffffe5f 	.word	0xfffffe5f

08002354 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	227c      	movs	r2, #124	; 0x7c
 8002360:	5c9b      	ldrb	r3, [r3, r2]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_UARTEx_DisableFifoMode+0x16>
 8002366:	2302      	movs	r3, #2
 8002368:	e027      	b.n	80023ba <HAL_UARTEx_DisableFifoMode+0x66>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	227c      	movs	r2, #124	; 0x7c
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	2124      	movs	r1, #36	; 0x24
 8002378:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	438a      	bics	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002396:	4013      	ands	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	2120      	movs	r1, #32
 80023ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	227c      	movs	r2, #124	; 0x7c
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	dfffffff 	.word	0xdfffffff

080023c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	227c      	movs	r2, #124	; 0x7c
 80023d6:	5c9b      	ldrb	r3, [r3, r2]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80023dc:	2302      	movs	r3, #2
 80023de:	e02e      	b.n	800243e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	227c      	movs	r2, #124	; 0x7c
 80023e4:	2101      	movs	r1, #1
 80023e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	2124      	movs	r1, #36	; 0x24
 80023ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	08d9      	lsrs	r1, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f854 	bl	80024cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	2120      	movs	r1, #32
 8002432:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	227c      	movs	r2, #124	; 0x7c
 8002438:	2100      	movs	r1, #0
 800243a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	227c      	movs	r2, #124	; 0x7c
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800245c:	2302      	movs	r3, #2
 800245e:	e02f      	b.n	80024c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	227c      	movs	r2, #124	; 0x7c
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	2124      	movs	r1, #36	; 0x24
 800246e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2101      	movs	r1, #1
 8002484:	438a      	bics	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 f813 	bl	80024cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	2120      	movs	r1, #32
 80024b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	227c      	movs	r2, #124	; 0x7c
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	f1ffffff 	.word	0xf1ffffff

080024cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80024d4:	2314      	movs	r3, #20
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <UARTEx_SetNbDataToProcess+0xcc>)
 80024da:	ca03      	ldmia	r2!, {r0, r1}
 80024dc:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80024de:	230c      	movs	r3, #12
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	4a2e      	ldr	r2, [pc, #184]	; (800259c <UARTEx_SetNbDataToProcess+0xd0>)
 80024e4:	ca03      	ldmia	r2!, {r0, r1}
 80024e6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	226a      	movs	r2, #106	; 0x6a
 80024f4:	2101      	movs	r1, #1
 80024f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2268      	movs	r2, #104	; 0x68
 80024fc:	2101      	movs	r1, #1
 80024fe:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002500:	e046      	b.n	8002590 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002502:	261f      	movs	r6, #31
 8002504:	19bb      	adds	r3, r7, r6
 8002506:	2208      	movs	r2, #8
 8002508:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800250a:	201e      	movs	r0, #30
 800250c:	183b      	adds	r3, r7, r0
 800250e:	2208      	movs	r2, #8
 8002510:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	0e5b      	lsrs	r3, r3, #25
 800251a:	b2da      	uxtb	r2, r3
 800251c:	241d      	movs	r4, #29
 800251e:	193b      	adds	r3, r7, r4
 8002520:	2107      	movs	r1, #7
 8002522:	400a      	ands	r2, r1
 8002524:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	0f5b      	lsrs	r3, r3, #29
 800252e:	b2da      	uxtb	r2, r3
 8002530:	251c      	movs	r5, #28
 8002532:	197b      	adds	r3, r7, r5
 8002534:	2107      	movs	r1, #7
 8002536:	400a      	ands	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800253a:	183b      	adds	r3, r7, r0
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	197a      	adds	r2, r7, r5
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	2114      	movs	r1, #20
 8002544:	1879      	adds	r1, r7, r1
 8002546:	5c8a      	ldrb	r2, [r1, r2]
 8002548:	435a      	muls	r2, r3
 800254a:	0010      	movs	r0, r2
 800254c:	197b      	adds	r3, r7, r5
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	250c      	movs	r5, #12
 8002552:	197a      	adds	r2, r7, r5
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	0019      	movs	r1, r3
 8002558:	f7fd fe5c 	bl	8000214 <__divsi3>
 800255c:	0003      	movs	r3, r0
 800255e:	b299      	uxth	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	226a      	movs	r2, #106	; 0x6a
 8002564:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002566:	19bb      	adds	r3, r7, r6
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	193a      	adds	r2, r7, r4
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	2114      	movs	r1, #20
 8002570:	1879      	adds	r1, r7, r1
 8002572:	5c8a      	ldrb	r2, [r1, r2]
 8002574:	435a      	muls	r2, r3
 8002576:	0010      	movs	r0, r2
 8002578:	193b      	adds	r3, r7, r4
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	197a      	adds	r2, r7, r5
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	0019      	movs	r1, r3
 8002582:	f7fd fe47 	bl	8000214 <__divsi3>
 8002586:	0003      	movs	r3, r0
 8002588:	b299      	uxth	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2268      	movs	r2, #104	; 0x68
 800258e:	5299      	strh	r1, [r3, r2]
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b009      	add	sp, #36	; 0x24
 8002596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002598:	08002b2c 	.word	0x08002b2c
 800259c:	08002b34 	.word	0x08002b34

080025a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	435a      	muls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	189b      	adds	r3, r3, r2
 80025bc:	43db      	mvns	r3, r3
 80025be:	400b      	ands	r3, r1
 80025c0:	001a      	movs	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	434b      	muls	r3, r1
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	434b      	muls	r3, r1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	43d2      	mvns	r2, r2
 80025ee:	401a      	ands	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	434b      	muls	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bd80      	pop	{r7, pc}

08002604 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	435a      	muls	r2, r3
 800261a:	0013      	movs	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	189b      	adds	r3, r3, r2
 8002620:	43db      	mvns	r3, r3
 8002622:	400b      	ands	r3, r1
 8002624:	001a      	movs	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	434b      	muls	r3, r1
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	434b      	muls	r3, r1
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	609a      	str	r2, [r3, #8]
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}

0800263e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	435a      	muls	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	189b      	adds	r3, r3, r2
 800265a:	43db      	mvns	r3, r3
 800265c:	400b      	ands	r3, r1
 800265e:	001a      	movs	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	434b      	muls	r3, r1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	434b      	muls	r3, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	60da      	str	r2, [r3, #12]
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b004      	add	sp, #16
 8002676:	bd80      	pop	{r7, pc}

08002678 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a19      	ldr	r1, [r3, #32]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4353      	muls	r3, r2
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4353      	muls	r3, r2
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	435a      	muls	r2, r3
 8002696:	0013      	movs	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	43db      	mvns	r3, r3
 800269e:	400b      	ands	r3, r1
 80026a0:	001a      	movs	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	434b      	muls	r3, r1
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	434b      	muls	r3, r1
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	434b      	muls	r3, r1
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	434b      	muls	r3, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b004      	add	sp, #16
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	0a12      	lsrs	r2, r2, #8
 80026da:	4353      	muls	r3, r2
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	4353      	muls	r3, r2
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	0a12      	lsrs	r2, r2, #8
 80026e6:	435a      	muls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	43db      	mvns	r3, r3
 80026f0:	400b      	ands	r3, r1
 80026f2:	001a      	movs	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	0a09      	lsrs	r1, r1, #8
 80026fc:	434b      	muls	r3, r1
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	0a09      	lsrs	r1, r1, #8
 8002702:	434b      	muls	r3, r1
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	0a09      	lsrs	r1, r1, #8
 8002708:	434b      	muls	r3, r1
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	434b      	muls	r3, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}

0800271c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800272a:	e040      	b.n	80027ae <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4091      	lsls	r1, r2
 8002736:	000a      	movs	r2, r1
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d032      	beq.n	80027a8 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0018      	movs	r0, r3
 800274c:	f7ff ff28 	bl	80025a0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d003      	beq.n	8002760 <LL_GPIO_Init+0x44>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d106      	bne.n	800276e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff ff4b 	bl	8002604 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0018      	movs	r0, r3
 8002778:	f7ff ff61 	bl	800263e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d111      	bne.n	80027a8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d807      	bhi.n	800279a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff ff70 	bl	8002678 <LL_GPIO_SetAFPin_0_7>
 8002798:	e006      	b.n	80027a8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ff8d 	bl	80026c2 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	40da      	lsrs	r2, r3
 80027b6:	1e13      	subs	r3, r2, #0
 80027b8:	d1b8      	bne.n	800272c <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d003      	beq.n	80027ca <LL_GPIO_Init+0xae>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d107      	bne.n	80027da <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff00 	bl	80025da <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <LL_I2C_Enable>:
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	601a      	str	r2, [r3, #0]
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LL_I2C_Disable>:
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	4393      	bics	r3, r2
 8002810:	001a      	movs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <LL_I2C_ConfigFilters>:
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <LL_I2C_ConfigFilters+0x2c>)
 8002832:	401a      	ands	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0219      	lsls	r1, r3, #8
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	430b      	orrs	r3, r1
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	ffffe0ff 	.word	0xffffe0ff

08002850 <LL_I2C_SetOwnAddress1>:
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	0adb      	lsrs	r3, r3, #11
 8002862:	02da      	lsls	r2, r3, #11
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	430b      	orrs	r3, r1
 800286a:	431a      	orrs	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b004      	add	sp, #16
 8002876:	bd80      	pop	{r7, pc}

08002878 <LL_I2C_EnableOwnAddress1>:
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0212      	lsls	r2, r2, #8
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <LL_I2C_DisableOwnAddress1>:
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <LL_I2C_DisableOwnAddress1+0x1c>)
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b002      	add	sp, #8
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	ffff7fff 	.word	0xffff7fff

080028b8 <LL_I2C_SetTiming>:
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	611a      	str	r2, [r3, #16]
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LL_I2C_SetMode>:
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <LL_I2C_SetMode+0x24>)
 80028e0:	401a      	ands	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	ffcfffff 	.word	0xffcfffff

080028f8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <LL_I2C_AcknowledgeNextData+0x24>)
 8002908:	401a      	ands	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	605a      	str	r2, [r3, #4]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	ffff7fff 	.word	0xffff7fff

08002920 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff ff67 	bl	8002800 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff ff6f 	bl	8002820 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0011      	movs	r1, r2
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff ffb4 	bl	80028b8 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f7ff ff46 	bl	80027e4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff9c 	bl	8002898 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6919      	ldr	r1, [r3, #16]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f7ff ff70 	bl	8002850 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f7ff ff7c 	bl	8002878 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0011      	movs	r1, r2
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff ffa1 	bl	80028d0 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f7ff ffae 	bl	80028f8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800299c:	2300      	movs	r3, #0
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <LL_SPI_IsEnabled>:
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d101      	bne.n	80029be <LL_SPI_IsEnabled+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_SPI_IsEnabled+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <LL_SPI_SetCRCPolynomial>:
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	001a      	movs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029ee:	230f      	movs	r3, #15
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff ffd4 	bl	80029a6 <LL_SPI_IsEnabled>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d13b      	bne.n	8002a7a <LL_SPI_Init+0x96>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <LL_SPI_Init+0xb0>)
 8002a08:	401a      	ands	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4319      	orrs	r1, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4319      	orrs	r1, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	4319      	orrs	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4319      	orrs	r1, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4319      	orrs	r1, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4319      	orrs	r1, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	430b      	orrs	r3, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <LL_SPI_Init+0xb4>)
 8002a44:	401a      	ands	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	430b      	orrs	r3, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	019b      	lsls	r3, r3, #6
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d106      	bne.n	8002a72 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ffab 	bl	80029c8 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002a72:	230f      	movs	r3, #15
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <LL_SPI_Init+0xb8>)
 8002a80:	401a      	ands	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002a86:	230f      	movs	r3, #15
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	781b      	ldrb	r3, [r3, #0]
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	ffff0040 	.word	0xffff0040
 8002a98:	fffff0fb 	.word	0xfffff0fb
 8002a9c:	fffff7ff 	.word	0xfffff7ff

08002aa0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <LL_SetSystemCoreClock+0x18>)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20000000 	.word	0x20000000

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	2600      	movs	r6, #0
 8002ac0:	4d0c      	ldr	r5, [pc, #48]	; (8002af4 <__libc_init_array+0x38>)
 8002ac2:	4c0d      	ldr	r4, [pc, #52]	; (8002af8 <__libc_init_array+0x3c>)
 8002ac4:	1b64      	subs	r4, r4, r5
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	2600      	movs	r6, #0
 8002ace:	f000 f821 	bl	8002b14 <_init>
 8002ad2:	4d0a      	ldr	r5, [pc, #40]	; (8002afc <__libc_init_array+0x40>)
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	; (8002b00 <__libc_init_array+0x44>)
 8002ad6:	1b64      	subs	r4, r4, r5
 8002ad8:	10a4      	asrs	r4, r4, #2
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	00b3      	lsls	r3, r6, #2
 8002ae2:	58eb      	ldr	r3, [r5, r3]
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	00b3      	lsls	r3, r6, #2
 8002aec:	58eb      	ldr	r3, [r5, r3]
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	08002b5c 	.word	0x08002b5c
 8002af8:	08002b5c 	.word	0x08002b5c
 8002afc:	08002b5c 	.word	0x08002b5c
 8002b00:	08002b60 	.word	0x08002b60

08002b04 <memset>:
 8002b04:	0003      	movs	r3, r0
 8002b06:	1812      	adds	r2, r2, r0
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <memset+0xa>
 8002b0c:	4770      	bx	lr
 8002b0e:	7019      	strb	r1, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e7f9      	b.n	8002b08 <memset+0x4>

08002b14 <_init>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr

08002b20 <_fini>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr
